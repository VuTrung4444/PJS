	repeat task.wait() until game:IsLoaded()

	local Library = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
	local Subs = Library.subs
	local IsOpen = Subs.Wait

	local mainMenuPlaceID = 5956785391
	local placeId = game.PlaceId
	local mapName
	local DailySpinEnabled = false
	local ClanSpinEnabled = false


	local legendaryClans = {"Shinazugawa", "Kocho", "Sabito", "Tamayo", "Kuwajima", "Makamo"}
	local mythicClans = {"Tomioka", "Tokito", "Hashibira", "Soyama"}
	local supremeClans = {"Kamado", "Agatsuma", "Rengoku", "Uzui"}

	local huntLegendary = false  
	local huntMythic = false  
	local huntSupreme = false

	local function getFilteredClans()
		local targetClans = {}
		if huntLegendary then
			for _, clan in ipairs(legendaryClans) do
				table.insert(targetClans, clan)
			end
		end
		if huntMythic then
			for _, clan in ipairs(mythicClans) do
				table.insert(targetClans, clan)
			end
		end
		if huntSupreme then
			for _, clan in ipairs(supremeClans) do
				table.insert(targetClans, clan)
			end
		end
		return targetClans
	end

	local function autoSpinClan()
		task.spawn(function()
			local players = game:GetService("Players")
			local replicatedStorage = game:GetService("ReplicatedStorage")

			local localPlayer = players.LocalPlayer
			local playerData = replicatedStorage:WaitForChild("Player_Data")
			local localData = playerData:WaitForChild(localPlayer.Name)
			local clan = localData:FindFirstChild("Clan")

			local remotes = replicatedStorage:WaitForChild("Remotes")
			local sendServer = remotes:WaitForChild("To_Server")
			local handleSpin = sendServer:WaitForChild("Handle_Initiate_S_")

			handleSpin:InvokeServer("check_can_spin")
			task.wait(1)

			while ClanSpinEnabled do
				local targetClans = getFilteredClans()

				if clan and table.find(targetClans, clan.Value) then
					ClanSpinEnabled = false
					break
				else
					handleSpin:InvokeServer("check_can_spin")
				end
			end
		end)
	end

	local function autoSpinAndClaim()
		task.spawn(function()
			while DailySpinEnabled do
				local player = game.Players.LocalPlayer
				local spinsFolder = player:FindFirstChild("daily_spins_folder")
				local remote = game.ReplicatedStorage:FindFirstChild("spins_thing_remote")

				if spinsFolder and remote then
					local dailySpins = spinsFolder:FindFirstChild("SpinsToday")
					if dailySpins and dailySpins.Value > 0 then
						remote:InvokeServer()
					else
						DailySpinEnabled = false
					end
				end
			end
		end)
	end


	if game.PlaceId == mainMenuPlaceID then
		local MainWindow = Library:CreateWindow({
			Name = "HackerLor | TksMyWife",
			Themeable = {
				Info = "VTrungHackerLor",
				Credit = false,
				Background = "",
				Visible = true
			}
		})

		local DailyTab = MainWindow:CreateTab("Main")

		-- Section Daily Spin
		local DailySection = DailyTab:CreateSection({Name = "Spin", Side = "Left"})
		DailySection:AddToggle({
			Name = "Auto Daily Spin",
			Flag = "AutoDailySpin",
			Callback = function(state)
				DailySpinEnabled = state
				if state then
					autoSpinAndClaim()
				end
			end
		})

		DailySection:AddToggle({ 
			Name = "Auto Spin Clan",
			Flag = "AutoSpinClan",
			Callback = function(state)
				-- Kiểm tra nếu ít nhất một trong ba toggle săn clan được bật
				if state and (huntLegendary or huntMythic or huntSupreme) then
					ClanSpinEnabled = true
					autoSpinClan()
				else
					ClanSpinEnabled = false
				end
			end
		})

		DailySection:AddToggle({
		Name = "Fake Name/DisplayName",
		Default = false,
		Callback = function(state)
			if state then
				-- Khi toggle được bật, chạy đoạn thay đổi tên hiển thị
				getgenv().Config = {
					FakeDisplayName = "SKTxT1xLoc",
					FakeName = "SKTxT1xLoc",
					FakeId = 1, -- ID giả để thay UserId
				}

				local players = game:GetService('Players')
				local lp = players.LocalPlayer

				local oldUserId = tostring(lp.UserId)
				local oldName = lp.Name
				local oldDisplayName = lp.DisplayName

				local function processtext(text)
					if string.gsub(text, oldName, Config.FakeName) ~= text then
						return string.gsub(text, oldName, Config.FakeName)
					end	
					if string.gsub(text, oldUserId, Config.FakeId) ~= text then
						return string.gsub(text, oldUserId, Config.FakeId)
					end
					if string.gsub(text, oldDisplayName, Config.FakeDisplayName) ~= text then
						return string.gsub(text, oldDisplayName, Config.FakeDisplayName)
					end
					return text or ''
				end

				for _, v in next, game:GetDescendants() do
					if v:IsA("TextBox") or v:IsA("TextLabel") or v:IsA("TextButton") then
						v.Text = processtext(v.Text)
						v.Name = processtext(v.Name)
						v.Changed:Connect(function(property)
							if property == "Text" or property == "Name" then
								v.Text = processtext(v.Text)
								v.Name = processtext(v.Name)
							end
						end)
					end
				end

				game.DescendantAdded:Connect(function(descendant)
					if descendant:IsA("TextBox") or descendant:IsA("TextLabel") or descendant:IsA("TextButton") then
						descendant.Text = processtext(descendant.Text)
						descendant.Name = processtext(descendant.Name)
						descendant.Changed:Connect(function(property)
							if property == "Text" or property == "Name" then
								descendant.Text = processtext(descendant.Text)
								descendant.Name = processtext(descendant.Name)
							end
						end)
					end
				end)

				lp.DisplayName = Config.FakeDisplayName
			end
		end
	})


	local ClanChooseSection = DailyTab:CreateSection({Name = "TròChơiNhânPhẩm", Side = "Right"})

	ClanChooseSection:AddToggle({
		Name = "Săn Legendary Clan",
		Flag = "HuntLegendary",
		Callback = function(state)
			huntLegendary = state
		end,
		State = false  
	})

	ClanChooseSection:AddToggle({
		Name = "Săn Mythic Clan",
		Flag = "HuntMythic",
		Callback = function(state)
			huntMythic = state
		end,
		State = false  
	})

	ClanChooseSection:AddToggle({
		Name = "Săn Supreme Clan",
		Flag = "HuntSupreme",
		Callback = function(state)
			huntSupreme = state
		end,
		State = false
	})
	end
	--// Variables \\--
	local plr = game:GetService("Players").LocalPlayer

	local function updateCharacterReferences(character)
		local hrp = character:WaitForChild("HumanoidRootPart")
			_G.Character = character
			_G.HumanoidRootPart = hrp
	end
		if plr.Character then
			updateCharacterReferences(plr.Character)
		end
		plr.CharacterAdded:Connect(function(character)
		updateCharacterReferences(character)
	end)

	local insert = table.insert 
	local character = plr.Character
	local PlrHumanoidRootPart = character:WaitForChild("HumanoidRootPart")

	local plr = game.Players.LocalPlayer
	local Character = plr.Character or plr.CharacterAdded:Wait()	
	local Humanoid = Character and Character:WaitForChild("Humanoid")
	local WalkSpeed = 150
	local JumpPower = 150

	plr.CharacterAdded:Connect(function(Char)
		Character = Char
		Humanoid = Character:WaitForChild("Humanoid")

		-- Cập nhật tốc độ và sức bật ngay khi nhân vật xuất hiện
		if WalkSpeed then
			Humanoid.WalkSpeed = WalkSpeed
		end
		if JumpPower then
			Humanoid.JumpPower = JumpPower
		end
	end)

	game:GetService("RunService").Stepped:Connect(function()
		if Character and Humanoid then
			-- Giữ tốc độ chạy cố định
			if Humanoid.WalkSpeed ~= WalkSpeed then
				Humanoid.WalkSpeed = WalkSpeed
			end
			
			-- Giữ sức bật cố định
			if Humanoid.JumpPower ~= JumpPower then
				Humanoid.JumpPower = JumpPower
			end
		end
	end)

	plr.CharacterAdded:Connect(function(Char)
		Character = Char
		Humanoid = Character:WaitForChild("Humanoid")

		-- Đặt lại tốc độ ngay lập tức
		task.wait(0.1) -- Chờ game cập nhật xong
		Humanoid.WalkSpeed = WalkSpeed
		Humanoid.JumpPower = JumpPower
	end)


	local RunService = game:GetService("RunService");
	local Players = game:GetService("Players");
	local Player = Players.LocalPlayer;
	local chr = Player.Character
	local root = chr and chr:FindFirstChild("HumanoidRootPart")

	local NextFrame = RunService.Heartbeat;


	local VirtualUser = game:GetService("VirtualUser")
	local Players = game:GetService("Players")
	local player = Players.LocalPlayer
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local Remotes = ReplicatedStorage:WaitForChild("Remotes")
	local DrumRemote = Remotes:WaitForChild("war_Drums_remote")
	local Map = Workspace:WaitForChild("Map")




	local activeToggle = nil
	local toggles = {}

	--// Tween \\--
	local function GetDistance(Endpoint)
		if typeof(Endpoint) == "Instance" then
			Endpoint = Vector3.new(Endpoint.Position.X, game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Y, Endpoint.Position.Z)
		elseif typeof(Endpoint) == "CFrame" then
			Endpoint = Vector3.new(Endpoint.Position.X, game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Y, Endpoint.Position.Z)
		end
		local Magnitude = (Endpoint - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
		return Magnitude
	end

	function Tween(Endpoint)
	if typeof(Endpoint) == "Instance" then
			Endpoint = Endpoint.CFrame
		end
		local TweenFunc = {}
		local Distance = GetDistance(Endpoint)
		local TweenInfo = TweenInfo.new(Distance / getgenv().tweenspeed, Enum.EasingStyle.Linear)

		local targetCFrame = Endpoint

		-- Giữ nguyên hướng nhìn khi ở chế độ "Above" hoặc "Below"
		if FarmMethod == "Above" then
			targetCFrame = CFrame.new(Endpoint.Position) * CFrame.Angles(math.rad(-90), 0, 0)
		elseif FarmMethod == "Below" then
			targetCFrame = CFrame.new(Endpoint.Position) * CFrame.Angles(math.rad(90), 0, 0)
		end

		local TweenObj = game:GetService("TweenService"):Create(
			game.Players.LocalPlayer.Character.HumanoidRootPart, 
			TweenInfo, 
			{ CFrame = targetCFrame }
		)
		TweenObj:Play()

		function TweenFunc:Cancel()
			TweenObj:Cancel()
			return false
		end

		if Distance <= 100 then
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = targetCFrame
			TweenObj:Cancel()
			return false
		end

		return TweenFunc
	end

	local function EnableAntiFall()
		local plr = game.Players.LocalPlayer
		if not plr.Character or not plr.Character:FindFirstChild("HumanoidRootPart") then
			return
		end

		local humanoidRootPart = plr.Character.HumanoidRootPart
		if not humanoidRootPart:FindFirstChild("BodyVelocity") then
			local antifall = Instance.new("BodyVelocity")
			antifall.Velocity = Vector3.new(0, 0, 0)
			antifall.MaxForce = Vector3.new(9e9, 9e9, 9e9)
			antifall.Name = "BodyVelocity"
			antifall.Parent = humanoidRootPart
		end
	end

	local function DisableAntiFall()
		local plr = game.Players.LocalPlayer
		if not plr.Character or not plr.Character:FindFirstChild("HumanoidRootPart") then
			return
		end

		local humanoidRootPart = plr.Character.HumanoidRootPart
		local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
		local antifall = humanoidRootPart:FindFirstChild("BodyVelocity")

		-- Xóa lực AntiFall nếu tồn tại
		if antifall then
			antifall:Destroy()
			task.wait(0.1) -- Chờ một chút để chắc chắn rằng BodyVelocity đã bị xóa
		end

		-- Đặt lại vận tốc để tránh bị giữ lại bởi lực cũ
		humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
		humanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)

		-- Đảm bảo nhân vật có thể di chuyển
		if humanoid then
			humanoid.PlatformStand = false  -- Ngăn trạng thái đứng yên cứng
			humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)  -- Đưa nhân vật về trạng thái bình thường
			task.wait(0.1)  -- Chờ một chút để trạng thái được cập nhật

			-- Nhảy ngay lập tức để kiểm tra xem có bị khóa không
			humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
		end
	end


	--// Get Closest \\---
	function IsEntitySelected(entity, selectedEntities)
		for _, selectedEntity in ipairs(selectedEntities) do
			if entity.Name == selectedEntity then
				return true
			end
		end
		return false
	end



	function getclosest(selectedEntities, parentFolder)
		local closestEntity = nil
		local closestDistance = math.huge

		local entities = parentFolder:GetDescendants()

		for i, entity in ipairs(entities) do
			if entity:IsA("Model") and IsEntitySelected(entity, selectedEntities) then
				local entityName = entity.Name
				local humanoid = entity:FindFirstChild("Humanoid")
				if humanoid and humanoid.Health > 0 then
					local entityCFrame = entity:GetModelCFrame()
					local distance = (entityCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
					if distance < closestDistance then
						closestDistance = distance
						closestEntity = entity
					end
				end
			end
		end

		return closestEntity
	end


	--// Tables \\--
	local AllowedBosses = {
		"Snow Trainee",
		"Sound Trainee",
		"Akaze",
		"Douma",
		"Enme",
		"Renpeke",
		"Muichiro Tokito",
		"Tengen",
		"Rengoku",
		"Inosuke",
		"Swampy",
		"Shiron",
		"Zanegutsu Kuuchie",
		"Sabito",
		"Sanemi",
		"Nezuko",
		"Giyu",
		"Slasher",
		"Susamaru",
		"Yahaba",
		"Bandit Kaden",
		"Nomay Bandit Boss",
		"Wop1",
		"Wop2",
		"Bandit Zoku",
		
	}

	local BossLocationsMap1 = {
		{ Name = "Shiron", Position = Vector3.new(3228.2385, 380, -3978.56933) },
		{ Name = "Giyu", Position = Vector3.new(3010.59, 316.95, -2924.11) },
		{ Name = "Nezuko", Position = Vector3.new(3556.5, 342.21, -4565.22) },
		{ Name = "Slasher", Position = Vector3.new(4365.71, 342.21, -4438.91) },
		{ Name = "Sanemi", Position = Vector3.new(1654, 348.46, -3737.69) },
		{ Name = "Yahaba", Position = Vector3.new(1409.45, 315.9, -4647.8) },
		{ Name = "Susamaru", Position = Vector3.new(1367.45, 315.9, -4553.09) },
		{ Name = "Bandit Kaden", Position = Vector3.new(-546.917, 304.467, -2860.067) },
		{ Name = "Zanegutsu Kuuchie", Position = Vector3.new(-351.28, 445.36, -2331.425) },
		{ Name = "Sabito", Position = Vector3.new(1237.92, 275.42, -2807.998) },
		{ Name = "Bandit Zoku", Position = Vector3.new(175.39, 282.88, -1964.26) }
	}

	local BossLocationsMap2 = {
		{ Name = "Akeza", Position = Vector3.new(2006.46, 586, -130.2) },
		{ Name = "Inosuke", Position = Vector3.new(1620.34, 300.98, -390.1) },
		{ Name = "Enme", Position = Vector3.new(1620.18, 500.61, -695.5775) },
		{ Name = "Wop1", Position = Vector3.new(-278.02, 601.28, -602.12) },
		{ Name = "Renpeke", Position = Vector3.new(-1265, 600.57, -659.554) },
		{ Name = "Swampy", Position = Vector3.new(-1364.28, 600.96875, -223.2) },
		{ Name = "Sound Trainee", Position = Vector3.new(1881.34, 675.42, -2800.46) },
		{ Name = "Tengen", Position = Vector3.new(1460.45, 486.122, -3137.05) },
		{ Name = "Snow Trainee", Position = Vector3.new(255.18, 530.94, -2989.45) },
		{ Name = "Douma", Position = Vector3.new(-0.146, 512.331, -1674.79) },
		{ Name = "Muichiro Tokito", Position = Vector3.new(4513.83, 672.41, -559.748) },
		{ Name = "Rengoku", Position = Vector3.new(3654.3999, 672.91, -348.877) },
		{ Name = "Slasher", Position = Vector3.new(908.402, 487.295, -1351.5653) },
		{ Name = "Nomay Bandit Boss", Position = Vector3.new(3467.59399, 673.1099, -1882.6058) },
		{ Name = "Wop2", Position = Vector3.new(3541.91, 673.11, -2145.45) }

	}

	local Map1 = {
		["Kiribating Village"] = CFrame.new(120, 282, -1743),
		["Zapiwara Cave"] = CFrame.new(-38, 275, -2403),
		["Ushumaro Village"] = CFrame.new(-90, 354, -3170),
		["Butterfly Mension"] = CFrame.new(3001, 316, -3806),
		["Final Selection"] = CFrame.new(5258, 365, -2422),
		["Zapiwara Mountain"] = CFrame.new(-366, 425, -2371),
		["Wind Trainer"] = CFrame.new(1797, 334, -3466),
		["Kabiwaru Village"] = CFrame.new(2015, 315, -3051),
		["Waroru Cave"] = CFrame.new(689, 261, -2469),
		["Ouwbayashi Home"] = CFrame.new(1241, 320, -4568),
		["Dangerous Woods"] = CFrame.new(3839, 342, -4177)
	}

	local Map2 = {
		["Nomay Village"] = CFrame.new(3562, 673, -2109),
		["Mugen Train Station"] = CFrame.new(783, 495, 900),
		["Wop City"] = CFrame.new(-31, 599, -431),
		["Village 2"] = CFrame.new(1215, 567, 95),
		["Cave 1"] = CFrame.new(4252, 671, 581),
		["Cave 2"] = CFrame.new(1182, 485, -1192),
		["Mist trainer location"] = CFrame.new(4324, 671, -569),
		["Akeza Cave"] = CFrame.new(1902, 554, -150),
		["Frozen Lake"] = CFrame.new(2049, 481, -769),
		["Beast Cave"] = CFrame.new(1840, 481, 37),
		["Wop's training grounds"] = CFrame.new(223, 595, 483),
		["Snowy Place"] = CFrame.new(379, 531, -2865),
		["Devourers Jaw"] = CFrame.new(480, 507, -1864),
		["Sound Cave"] = CFrame.new(1828, 487, -2770)
	}


	local SelectedMap = nil -- Mặc định không có Map nào được chọn
	local LocationsDropdown, BossesDropdown -- Lưu Dropdown để cập nhật danh sách
	local Map1List, Map2List, BossesMap1List, BossesMap2List = {}, {}, {}, {}
	local LocationsToUse, BossesToUse = {}, {}
	local ActiveBossLocations = {}

	-- Điền danh sách địa điểm & Boss CHỈ MỘT LẦN
	for name, _ in pairs(Map1) do
		table.insert(Map1List, name)
	end
	for name, _ in pairs(Map2) do
		table.insert(Map2List, name)
	end
	for name, _ in pairs(BossLocationsMap1) do
		table.insert(BossesMap1List, name)
	end
	for name, _ in pairs(BossLocationsMap2) do
		table.insert(BossesMap2List, name)
	end


	local raceTable = {
		[1] = "Human",
		[2] = "Slayer",
		[3] = "Demon",
		[4] = "Hybrid"
	}

	local Bosses = {}
	local mobs = {}

	local GodModes = {
		"scythe_asteroid_reap",
		"ice_demon_art_bodhisatva",
		"akaza_bda_compass_needle",
		"dream_bda_flesh_monster",
		"swamp_bda_swamp_domain",
		"blood_burst_explosive_choke_slam",
		"Water_Surface_Slash",
		"insect_breathing_dance_of_the_centipede",
		"Wind_breathing_black_wind_mountain_mist",
		"flame_breathing_flaming_eruption",
		"Beast_breathing_devouring_slash",
		"snow_breathing_illusory_Storm",
		"sound_breathing_smoke_screen",
		"mist_breathing_obscuring_clouds",
	}

	--// Kill Aura \\--
	local function attack(method)
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
		game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
	end

	local attackMethods = {
		["Combat"] = 'fist_combat',
		["Sword"] = 'Sword_Combat_Slash',
		["Scythe"] = 'Scythe_Combat_Slash',
		["Claw"] = 'claw_Combat_Slash',
		["Fans"] = 'fans_combat_slash',
	}

	local godModeState = false
	local godModeToggle = {}-- Khai báo trước nhưng chưa gán

	--// Main Script \\--
	local library = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
	local Subs = library.subs
	local IsOpen = Subs.Wait

	local Window = library:CreateWindow({
		Name = "HackerLor | DMM DianaVsRice",
		Themeable = {
			Info = "VTrungHackerLor",
			Credit = false,
			Background = "",
			Visible = true
		}
	})

	--// Main Tab \\--
	local MainTab = Window:CreateTab({Name = "Main"})
	local MainSection = MainTab:CreateSection({Name = "Farming"})
	local Settings = MainTab:CreateSection({Name = "Settings"})
	local KillAura = MainTab:CreateSection({Name = "Kill Aura", Side = "Right"})
	local Teleports = MainTab:CreateSection({Name = "Teleports", Side = "Right"})
	local Info = MainTab:CreateSection({Name = "Info", Side = "Right"})
	local Gourd = MainTab:CreateSection({Name = "Gourd", Side = "Right"})
	local AuraTab = MainTab:CreateSection({Name = "AuraSkills", Side = "Left"})


	--// Misc Tab \\--
	local MiscTab = Window:CreateTab({Name = "Misc"})
	local MiscSection = MiscTab:CreateSection({Name = "Misc"})
	local GodModeQuick = MiscTab:CreateSection({Name = "GMQ", Side = "Right"})
	local Breathings = MiscTab:CreateSection({Name = "Breathings", Side = "Left"})
	local SpeedAndJump = MiscTab:CreateSection({Name = "Speed&Jump", Side = "Right"})
	local Ect = MiscTab:CreateSection({Name = "Ect", Side = "Left"})

	local Debree = Workspace:WaitForChild("Debree")
	local EctFolder = ReplicatedStorage:WaitForChild("Misc")
	local Clashing = EctFolder:WaitForChild("Clashing")


	MainSection:AddToggle({
		Name = "Arrow Aura [Near Mobs]",
		Flag = "Arrow",
		Callback = function (v)
			getgenv().Arrow = v
		end
	})

	MainSection:AddToggle({
		Name = "Arrow Aura [NoLag]",
		Flag = "ArrowAll",
		Callback = function (v)
			getgenv().AllArrow = v
		end
	})


-- AutoBoss 
local FarmLoop = nil
local FarmLoopRunning = false
local TweenFa = nil

local function ClearTween()
	if TweenFa then
		TweenFa:Cancel()
		TweenFa = nil
	end
end

local function startFarmLoop()
	if FarmLoopRunning then return end
	FarmLoopRunning = true

	FarmLoop = task.spawn(function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()


		while getgenv().Farm do
			if not character or not character:FindFirstChild("HumanoidRootPart") then
				character = player.CharacterAdded:Wait()
				task.wait(1)
			end

			UpdateActiveBossLocations()
			if #ActiveBossLocations == 0 then
				task.wait(1)
				continue
			end

			for _, boss in ipairs(ActiveBossLocations) do
				if not getgenv().Farm then break end

				local bossCFrame = CFrame.new(boss.Position)

				ClearTween()
				TweenFa = Tween(bossCFrame)

				repeat
					task.wait(0.1)
				until GetDistance(boss.Position) < 20 or not getgenv().Farm

				ClearTween()
				if not getgenv().Farm then break end

				local bossEntity = getclosest({boss.Name}, game:GetService("Workspace").Mobs)
				task.wait(1)

				if bossEntity and bossEntity:FindFirstChild("Humanoid") then
					while getgenv().Farm and bossEntity.Parent and bossEntity.Humanoid.Health > 0 do
						if not game.Players.LocalPlayer.Character then break end
						task.wait()

						if bossEntity.PrimaryPart then 
							local entityCFrame = CFrame.new(bossEntity.PrimaryPart.Position) * FarmModes

							if GetDistance(entityCFrame) >= 25 and GetDistance(entityCFrame) < 150 then
								game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = entityCFrame
							else
								if not TweenFa then
									TweenFa = Tween(entityCFrame)
								end
							end
						end
					end

					ClearTween()
				end

				task.wait(1) 
			end

			task.wait(2) 
		end

		FarmLoopRunning = false
	end)
end


function StopAutoFarm()
	getgenv().Farm = false
	if FarmLoop then
		task.cancel(FarmLoop)
		FarmLoop = nil
	end

	FarmLoopRunning = false
	ClearTween()
end

local player = game.Players.LocalPlayer
player.CharacterAdded:Connect(function(newChar)
	task.wait(2)
	if getgenv().Farm then
		StopAutoFarm()
		task.wait(1)
		getgenv().Farm = true
		startFarmLoop()
	end
end)

MainSection:AddToggle({
	Name = "Farm",
	Flag = "FarmSelectedBosses",
	Callback = function(v)
		getgenv().Farm = v
		if v then
			if placeId == 13883279773 or placeId == 17387475546 or placeId == 13883059853 or placeId == 17387482786 then
				task.delay(0.1, function()
					if not FarmLoopRunning then
						startFarmLoop()
					end
				end)
			end

		else

			local plr = game.Players.LocalPlayer
			if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
				local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
				if humanoid then
					humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
				end
			end
		end
	end
})

	--MoveAround--
	local MoveLoop = nil
	local MoveLoopRunning = false
	local isTweening = false
	local CurrentTween = nil

local function startMoveLoop()
	if MoveLoopRunning then return end
	MoveLoopRunning = true


	MoveLoop = task.spawn(function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()


		while getgenv().MoveAround do

			if not character or not character:FindFirstChild("HumanoidRootPart") then
				character = player.CharacterAdded:Wait()
				task.wait(1)

			end

			UpdateActiveBossLocations()
			if #ActiveBossLocations == 0 then
				task.wait(1)
				continue
			end

			for _, boss in pairs(ActiveBossLocations) do
				if not getgenv().MoveAround then break end

				local pos = boss.Position
				local bossCFrame = CFrame.new(pos)

				if CurrentTween then
					CurrentTween:Cancel()
					CurrentTween = nil
				end

				isTweening = true
				CurrentTween = Tween(bossCFrame)

				repeat
					task.wait(0.1)
				until GetDistance(pos) < 20 or not getgenv().MoveAround

				if CurrentTween then
					CurrentTween:Cancel()
					CurrentTween = nil
				end

				isTweening = false

				task.wait(1) 
			end

			task.wait(15) 
		end

		MoveLoopRunning = false
	end)
end


function StopMoveAround()
	getgenv().MoveAround = false

	if MoveLoop then
		task.cancel(MoveLoop)
		MoveLoop = nil
	end

	if CurrentTween then
		CurrentTween:Cancel()
		CurrentTween = nil
	end

	MoveLoopRunning = false
	isTweening = false
end


local player = game.Players.LocalPlayer
player.CharacterAdded:Connect(function(newChar)
	task.wait(2)
	if getgenv().MoveAround then
		StopMoveAround()
		task.wait(1)
		getgenv().MoveAround = true
		startMoveLoop()
	end
end)

	MainSection:AddToggle({
		Name = "Move Around [Arrow]",
		Flag = "MoveAroundBosses",
		Callback = function(v)
			getgenv().MoveAround = v
			if v then
				if placeId == 13883279773 or placeId == 17387475546 or placeId == 13883059853 or placeId == 17387482786 then
					task.delay(0.1, function()
						if not MoveLoopRunning then
							startMoveLoop()
						end
					end)
				end
			else
				local plr = game.Players.LocalPlayer
				if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
					local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
					humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
				end
				StopMoveAround()
			end
		end
	})

	MainSection:AddTextbox({
		Name = 'Player Target',
		Placeholder = '...',
		Flag = 'Player Name',
		Callback = function(v)
			getgenv().selectedPlayerName = v
		end
	})

	MainSection:AddToggle({
		Name = "Arrow Aura [Target Player]",
		Flag = "ArrowTargeted",
		Callback = function (v)
			getgenv().TargetPlayersArrow = v
		end
	})


	function findPlayerByName(name)
		for _, player in pairs(game.Players:GetPlayers()) do
			if player.Name == name and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
				return player.Character
			end
		end
		return nil
	end


	spawn(function()
		while task.wait(1) do
			if getgenv().TargetPlayersArrow then
				local selectedPlayerName = getgenv().selectedPlayerName
				if selectedPlayerName and selectedPlayerName ~= "" then
					local target = findPlayerByName(selectedPlayerName)

					if target then
						local targetCFrame = target:GetModelCFrame()
						local humanoid = target:FindFirstChildOfClass("Humanoid")

						if targetCFrame and humanoid and humanoid.Health > 0 then
							for i = 1, 5 do
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(
									"arrow_knock_back_damage",
									game.Players.LocalPlayer.Character,
									targetCFrame,
									target,
									200,
									200
								)
								task.wait(0.4)
							end
						end
					end
				end
			end
		end
	end)




MainSection:AddToggle({
    Name = "Teleport to Target",
    Flag = "TargetPlayersTeleport",
    Callback = function(state)
        if state then
            local selectedPlayerName = getgenv().selectedPlayerName
            if selectedPlayerName and selectedPlayerName ~= "" then
                local targetPlayer = game.Players:FindFirstChild(selectedPlayerName)
                
                if targetPlayer and targetPlayer.Character then
                    local targetPivot = targetPlayer.Character:GetPivot()
                    local plr = game.Players.LocalPlayer
                    local hrp = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
                    if not hrp then return end

                    local offset = Vector3.new(150, 200, 0)

                    hrp.CFrame = targetPivot + offset
                end
            end
        end
    end
})


	MainSection:AddToggle({
    Name = "QuickSell",
    Default = false,
    Callback = function(enabled)
        if enabled then

            local Players = game:GetService("Players")
            local player = Players.LocalPlayer

            local targetNames = {
				"Tanjiro Haorie",
				"Ichimatsu Haorie",
				"Orenjibisuto Mask",
				"Vigilante Scarf",
				"Mugen Train Ticket",
				"Claws",
				"Blood Necklace",
				"Mist Necklace",
				"Snow Katana",
				"Ominous Blindfold",
				"Gem Stone Eyepatch",
				"Banigaru Mask",
                "Lightning Katana",
                "Black Bamboo Amigasa",
                "Cloud Katana",
                "Metal Scythe",
                "Thundercloud Katana",
                "Tornadic Katana",
                "Volcanic Katana",
                "Waterfall Katana",
                "Insect Katana",
				"Beast Katanas",
                "Giyu's Water Katana",
                "Shinobu Haorie",
                "Flame Necklace",
                "Fox Mask",
                "Kanden Shi Haorie",
                "Kesshoseki Necklace",
                "Purple Flower Haorie",
                "Scythe",
                "Shadow Haorie",
                "Shockwave Necklace",
                "Water Katana",
                "Sleeveless Dragon Haorie",
                "Snow Haorie",
                "Wind Katana",
                "Yellow Haorie",
                "Zenitsu Haorie",
                "Giyu Haorie",
                "Stylish Haorie",
                "Akai Kumo Haorie",
				"Akuma Kurenza Mask",
				"Akuma no ie Mask",
				"Bandaged Blindfold",
				"Bandaged Mask",
				"Black Caped Scarf",
				"Beast Necklace",
				"Black Spider Haorie",
				"Flame Katana",
				"Mist Katana",
				"Murasakiiro Sutoraipu Haorie",
				"Olive Green Flower Haorie",
				"Green Vine Haorie",
				"Dark Green Haorie",
				"Black Lilly Haorie",
				"Black Hooded Scarf",
				"Old Lantern",
				"Brown Scarf",
				"Butterfly Necklace",
				"Fawx Mask",
				"Flower Fox Mask",
				"Fox King Mask",
				"Foxie Mask",
				"Purple Foxie Mask",
				"Lantern Of Everlasting Glow",
				"Rusty Necklace",
				"Reaper Necklace",
				"Rusty Necklace",
				"Thunder Necklace",
				"Water Necklace",
				"Sakura Haorie",
				"Tokosen Haorie",
				"Uncertained Times Scarf",
				"Tonakai Keikai Mask",
				"Tigress Warding Mask",
				"White Scarf",
				"Tactical Black Headband",
				"Red Scarf",
				"Panther Mask",
				"Inosuke Bottom",
				"Boroboro Haorie",
				"Dark Smoke Visor",
				"Boar Head",
				"Arrow Necklace",
				"Swamp Necklace",
				"Wind Necklace",
				"Tamari Necklace",
				"Stylish Mask",
            }

            local targetNameSet = {}
            for _, name in ipairs(targetNames) do
                targetNameSet[name] = true
            end

            local valuePerRarity = {
                ["Common"] = 100,
                ["Uncommon"] = 250,
                ["Rare"] = 500,
                ["Mythic"] = 3500
            }

            local replicatedStorage = game:GetService("ReplicatedStorage")
            local playerData = replicatedStorage:WaitForChild("Player_Data")
            local inventory = playerData:FindFirstChild(player.Name).Inventory.Items
            local sellRemote = replicatedStorage:WaitForChild("Sell_Items_tang")

            local totalValue = 0
            local sellItemsArg = {}

            for _, item in pairs(inventory:GetChildren()) do
                local settings = item:FindFirstChild("Settings")
                local nameObj = settings and settings:FindFirstChild("Name")
                local rarityObj = settings and settings:FindFirstChild("Rarity")
                local idObj = settings and settings:FindFirstChild("Id")
                local amountObj = item:FindFirstChild("Amount")

                if nameObj and rarityObj and idObj and amountObj then
                    local itemName = nameObj.Value
                    if targetNameSet[itemName] then
                        local rarity = rarityObj.Value
                        local quantity = amountObj.Value
                        local itemId = idObj.Value

                        local valuePerItem = valuePerRarity[rarity]
                        if valuePerItem then
                            local itemTotalValue = valuePerItem * quantity
                            totalValue = totalValue + itemTotalValue
                            sellItemsArg[itemId] = quantity
                        end
                    end
                end
            end

            local moneyToReceive = math.floor(totalValue / 25000)

            print("📦 Tổng giá trị item:", totalValue)
            print("💰 Số tiền quy đổi (làm tròn xuống):", moneyToReceive)

            local args = {
                sellItemsArg,
                moneyToReceive,
                0
            }

            local result = sellRemote:InvokeServer(unpack(args))
        end
    end
})


	--// Settings \\--
	Settings:AddDropdown({
		Name = "Farm Method",
		List = {"Above","Behind","Below"},
		Flag = "FarmMethodSelection",
		Nothing = "Select Method...",
		Value = "Above",
		Callback = function(Chosen)
			FarmMethod = Chosen 
		end
	})

	Settings:AddSlider({
		Name = "Distance",
		Flag = "DistanceSlider",
		Value = 10,
		Min = 1,
		Max = 200,
		Textbox = true,
		Callback = function(Value)
			getgenv().Distance = Value
		end
	})

	Settings:AddSlider({
		Name = "Tween Speed",
		Flag = "TweenSlider",
		Value = 200,
		Min = 100,
		Max = 500,
		Textbox = true,
		Callback = function(Value)
			getgenv().tweenspeed = Value
		end
	})

	--// Kill Aura \\--
	KillAura:AddToggle({
		Name = "Kill Aura",
		Flag = "KillAuraToggle",
		Callback = function (v)
			getgenv().KillAura = v
		end
	})


	local weapons = {"Sword", "Combat", "Scythe", "Fans", "Claw"}
	local toggles = {}
	local activeToggle = nil

	for _, weapon in ipairs(weapons) do
		local toggle = KillAura:AddToggle({
			Name = weapon,
			Flag = "KillAuraWeapon_" .. weapon,
			Callback = function(state)
				if state then

					if activeToggle and activeToggle ~= toggle then
						activeToggle:SetState(false)
					end

					activeToggle = toggle
					Method = weapon
				else

					if activeToggle == toggle then
						activeToggle = nil
						Method = nil

					end
				end
			end
		})

		toggles[weapon] = toggle
	end

	Teleports:AddButton({
		Name = "Skibidi To",
		Callback = function()
			local Player = game.Players.LocalPlayer

			-- Kiểm tra SelectedArea hợp lệ
			if not SelectedArea or SelectedArea == "" then
				return
			end

			-- Tạo đường dẫn script GUI
			local scriptPath = string.format("Players.%s.PlayerGui.Npc_Dialogue.Guis.ScreenGui.LocalScript", Player.Name)

			-- Giá trị thời gian giả định (bạn có thể dùng tick(), os.clock() hoặc giá trị bất kỳ)
			local teleportTime = os.clock() * 1000 -- Hoặc tick() * 1000 để mô phỏng giá trị như ví dụ

			-- Gửi request đến server
			local args = {
				scriptPath,
				teleportTime,
				SelectedArea
			}

			local success, result = pcall(function()
				return game:GetService("ReplicatedStorage")
					:WaitForChild("teleport_player_to_location_for_map_tang")
					:InvokeServer(unpack(args))
			end)
		end
	})

local autoGourdThread

Gourd:AddToggle({
    Name = "Auto Gourd",
    Flag = "AutoGourd",
    Keybind = false,
    Callback = function(v)
        getgenv().AutoGourd = v

        if v then
            autoGourdThread = task.spawn(function()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Players = game:GetService("Players")
                local Plr = Players.LocalPlayer
                local PlayerData = ReplicatedStorage:WaitForChild("Player_Data"):WaitForChild(Plr.Name)
                local Inventory = PlayerData:WaitForChild("Inventory")

                local function findGourd()
                    local gourdNames = {"Big Gourd", "Medium Gourd", "Small Gourd"}
                    for _, name in ipairs(gourdNames) do
                        local g = Plr.Backpack:FindFirstChild(name) or Plr.Character:FindFirstChild(name)
                        if g then return g end
                    end
                    return nil
                end

                local function equipGourd(gourdName)
                    local gourdItem = Inventory:WaitForChild("Items"):FindFirstChild(gourdName)
                    if gourdItem then
                        local args = {
                            "change_equip_for_item",
                            Plr,
                            Inventory,
                            gourdItem
                        }
                        ReplicatedStorage.Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))
                    end
                end

                local function blowGourd(gourd)
                    for i = 1, 6 do
                        local args = {
                            "blow_in_gourd_thing",
                            Plr,
                            gourd,
                            1
                        }
                        ReplicatedStorage.Remotes.To_Server.Handle_Initiate_S_:InvokeServer(unpack(args))
                        print("💨 Đã thổi", gourd.Name, "lần", i, "lúc", os.date("%X"))
                        task.wait(0.5)
                    end
                end

                while getgenv().AutoGourd do
                    local gourd = findGourd()

                    if not gourd or tostring(gourd) == "Tool" then
                        local gourdOptions = {"Big Gourd", "Medium Gourd", "Small Gourd"}
                        for _, gName in ipairs(gourdOptions) do
                            equipGourd(gName)
                            task.wait(1)
                            gourd = findGourd()
                            if gourd and tostring(gourd) ~= "Tool" then break end
                        end
                    end

                    if gourd and tostring(gourd) ~= "Tool" then
                        blowGourd(gourd)
                    end

                    task.wait(2)
                end
            end)
        else
            getgenv().AutoGourd = false
        end
    end
})



getgenv().BuyingGourd = false

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Plr = Players.LocalPlayer
local PlayerData = ReplicatedStorage:WaitForChild("Player_Data"):WaitForChild(Plr.Name)
local Yen = PlayerData:WaitForChild("Yen")
local Inventory = PlayerData:WaitForChild("Inventory")


local function findGourd()
    local gourdNames = {"Big Gourd", "Medium Gourd", "Small Gourd"}
    for _, name in ipairs(gourdNames) do
        local g = Plr.Backpack:FindFirstChild(name) or Plr.Character:FindFirstChild(name)
        if g then return g end
    end
    return nil
end

local function buyGourd()
    local args = {
        "buysomething",
        Plr,
        getgenv().GourdSize,
        Yen,
        Inventory
    }
    ReplicatedStorage.Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))
end


task.spawn(function()
    while true do
        if getgenv().BuyingGourd then
            local currentGourd = findGourd()
            if not currentGourd or tostring(currentGourd) == "Tool" then
                buyGourd()
            end
        end
        task.wait(4)
    end
end)


local function toggleGourd(gourdName, v)
    if v then
        getgenv().GourdSize = gourdName
        getgenv().BuyingGourd = true


        if gourdName ~= "Small Gourd" then
            Gourd.Flags.SmallGourdToggle = false
        end
        if gourdName ~= "Medium Gourd" then
            Gourd.Flags.MediumGourdToggle = false
        end
        if gourdName ~= "Big Gourd" then
            Gourd.Flags.BigGourdToggle = false
        end
    else

        if getgenv().GourdSize == gourdName then
            getgenv().BuyingGourd = false
        end
    end
end


Gourd:AddToggle({
    Name = "Small Gourd",
    Flag = "SmallGourdToggle",
    Keybind = false,
    Callback = function(v)
        toggleGourd("Small Gourd", v)
    end
})

Gourd:AddToggle({
    Name = "Medium Gourd",
    Flag = "MediumGourdToggle",
    Keybind = false,
    Callback = function(v)
        toggleGourd("Medium Gourd", v)
    end
})

Gourd:AddToggle({
    Name = "Big Gourd",
    Flag = "BigGourdToggle",
    Keybind = false,
    Callback = function(v)
        toggleGourd("Big Gourd", v)
    end
})

	


	--// Info \\--
	Info:AddLabel("")
	Info:AddLabel("")
	local infoLabel = Info:AddLabel("")
	Info:AddLabel("")
	Info:AddLabel("")


	--// Misc Section \\--
	MiscSection:AddToggle({
		Name = "Auto Collect Chest",
		Flag = "CollectAllChest",
		Keybind = false,
		Callback = function (v)
			AutoCollectChest = v

			if v then
				-- Cập nhật lại thông tin nhân vật
				local function GetCharacter()
					local player = game:GetService("Players").LocalPlayer
					local character = player.Character or player.CharacterAdded:Wait()
					return character
				end

				-- Gọi để lấy lại thông tin ngay khi bật
				Character = GetCharacter()
			end
		end
	})

	SpeedAndJump:AddSlider({
		Name = "WalkSpeed",
		Value = 280,
		Min = 16,
		Max = 300,
		Flag = "WalkSpeed",
		Textbox = true,
		Callback = function(State)
			WalkSpeed = State
			if game.Players.LocalPlayer.Character then
				local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
				if humanoid then
					humanoid.WalkSpeed = WalkSpeed
				end
			end
		end
	})

	SpeedAndJump:AddSlider({
		Name = "JumpPower",
		Value = 150,
		Min = 50,
		Max = 1000,
		Flag = "JumpPower",
		Textbox = true,
		Callback = function(State)
			JumpPower = State
			if game.Players.LocalPlayer.Character then
				local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
				if humanoid then
					humanoid.JumpPower = JumpPower
				end
			end
		end
	})


	-- God Mode variables
	local UIS = game:GetService("UserInputService")

	local godModeToggle = GodModeQuick:AddToggle({
		Name = "Enable God Mode",
		Flag = "ENG_Toggle",
		keybind = "", 
		Callback = function(v)
			godModeState = v
			ENG = v
		end
	})

	local function toggleGodMode(state)
		godModeState = state
		ENG = state

		-- Update toggle state
		if godModeToggle.Callback then
			task.spawn(function()
				godModeToggle.Callback(state)
			end)
		end
	end



	for _, godMode in ipairs(GodModes) do
		local toggle = GodModeQuick:AddToggle({
			Name = godMode,
			Flag = "Gm_" .. godMode,
			Callback = function(state)
				if state then
					if activeToggle and activeToggle ~= toggle then
						activeToggle:SetState(false)
					end
					activeToggle = toggle
					getgenv().GodSelected = godMode
				else
					if activeToggle == toggle then
						activeToggle = nil
						getgenv().GodSelected = nil
					end
				end
			end
		})
		toggles[godMode] = toggle
	end

	-- Inf iFrames
	spawn(function()
		while task.wait() do
			if ENG then
				local args = {
					[1] = "skil_ting_asd",
					[2] = game:GetService("Players").LocalPlayer,
					[3] = getgenv().GodSelected,
					[4] = 1
				}
				game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
				task.wait(0.5)
			end
		end
	end)

	-- Koketsu Arrow Detection (with animation check only)
	local function monitorKoketsuArrow()
		-- Kiểm tra khi nhân vật đang sử dụng Koketsu Arrow
		local player = game.Players.LocalPlayer
		local character = player.Character
		if character and character:FindFirstChild("HumanoidRootPart") then
			-- Kiểm tra khi animation của Koketsu Arrow bắt đầu
			local humanoid = character:FindFirstChild("Humanoid")
			if humanoid then
				humanoid.AnimationPlayed:Connect(function(animation)
					if animation.Name == "Koketsu_Arrow_actual_anim" then
						if godModeState then
							task.wait(0.35)
							toggleGodMode(false)
						end
					end
				end)
			end
		end
	end
	monitorKoketsuArrow()

MiscSection:AddButton({
	Name = "No Fog",
	Flag = "NF",
	Keybind = false,
	Callback = function()
		local Lighting = game:GetService("Lighting")
			for _, light in ipairs(Lighting:GetChildren()) do
				if light:IsA("Atmosphere") or string.find(light.Name, "Blur") or string.find(light.Name, "Bloom") then
					light:Destroy()
				end
			Lighting.FogEnd = 1000000
		end
	end
})

MiscSection:AddButton({
    Name = "Delete map",
    Callback = function()
        if workspace:FindFirstChild("Map") then

            for _, child in pairs(workspace.Map:GetChildren()) do
                child:Destroy()
            end
        end
        if workspace:FindFirstChild("Terrain") and workspace.Terrain:FindFirstChild("Water_Regions") then
            workspace.Terrain.Water_Regions:Destroy()
        end
    end
})


MiscSection:AddToggle({
	Name = "Auto Buy EXP",
	Flag = "AutoBuyEXP",
	Keybind = false,
	Callback = function(v)
		if v == true then
			getgenv().AutoBuyEXP = true
			spawn(function()
				while getgenv().AutoBuyEXP do
					local prompt = workspace["Shop Items"]["EXP Elixir"].Handle:FindFirstChildOfClass("ProximityPrompt")
					if prompt then
						fireproximityprompt(prompt)
					end
					task.wait(0.25)
				end
			end)
		else
			getgenv().AutoBuyEXP = false
		end
	end
})


MiscSection:AddToggle({
	Name = "Auto Open Hell",
	Flag = "AutoTP",
	Keybind = false,
	Callback = function(v)
		if v == true and placeId == 11468034852 then
			local RunService = game:GetService("RunService")
			local Players = game:GetService("Players")
			local Workspace = game:GetService("Workspace")

			local Player = Players.LocalPlayer

			local function smoothMoveTo(position, speed)
				local hrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
				if not hrp or not position then return end

				local startPos = hrp.Position
				local delta = position - startPos
				local duration = delta.Magnitude / speed
				local startTime = tick()

				while tick() - startTime < duration do
					local t = math.min((tick() - startTime) / duration, 1)
					local nextPos = startPos + delta * t
					hrp.Velocity = Vector3.new(0, 0, 0)
					hrp.CFrame = CFrame.new(nextPos)
					RunService.Heartbeat:Wait()
				end

				hrp.Velocity = Vector3.new(0, 0, 0)
				hrp.CFrame = CFrame.new(position)
			end


			coroutine.wrap(function()
				local targetPos = Vector3.new(5549.56, -53.07, 2471.93)
				smoothMoveTo(targetPos, 200)

				task.wait(0.5)

				local success, err = pcall(function()
					local prox = Workspace:WaitForChild("HardMode"):WaitForChild("ProximityPrompt")
					fireproximityprompt(prox)
				end)

			end)()
		end
	end
})

	MiscSection:AddToggle({
		Name = "War Drums",
		Value = false, 
		Flag = "WarDrums",
		Callback = function(State)
			TLROAPSMG = State 
			while TLROAPSMG and IsOpen() do 
				DrumRemote:FireServer(true)
				task.wait(7.5)
			end     
		end 
	})

	MiscSection:AddToggle({
		Name = "No Sun Dmg",
		Flag = "NS",
		Callback = function (v)
			if game:GetService("Players").LocalPlayer.PlayerScripts.Small_Scripts.Gameplay:FindFirstChild("Sun_Damage") then
				if v == true then
						game:GetService("Players").LocalPlayer.PlayerScripts.Small_Scripts.Gameplay.Sun_Damage.Disabled = true                
					end
				end
		end
	})


	MiscSection:AddToggle({
		Name = "Boss Damage Log Spoof",
		Flag = "BDLS",
		Keybind = false,
		Callback = function (v)
			getgenv().hide_userdmg = v
		end
	})

	MiscSection:AddToggle({
		Name = "Spin Arrow",
		Default = false,
		Callback = function(state)
			if state then
				-- Khi toggle được bật
				task.spawn(function()
					local ReplicatedStorage = game:GetService("ReplicatedStorage")
					local Players = game:GetService("Players")

					local player = Players.LocalPlayer
					local playerName = player.Name

					local demonArtValue = ReplicatedStorage:WaitForChild("Player_Data")
						:WaitForChild(playerName)
						:WaitForChild("Demon_Art")

					local remote = ReplicatedStorage:WaitForChild("Remotes")
						:WaitForChild("To_Server")
						:WaitForChild("Handle_Initiate_S_")

					while state and demonArtValue.Value ~= "Arrow" do
						remote:InvokeServer("check_can_spin_demon_art")
						task.wait(0.5)
						print("Hiện tại Demon_Art là:", demonArtValue.Value)
					end

				end)
			end
		end
	})

	MiscSection:AddToggle({
		Name = "Kamado God Mode [Kamado]",
		Flag = "KamadoGod",
		Keybind = false,
		Callback = function (v)
			if v then
				game:GetService("ReplicatedStorage").Remotes.heal_tang123asd:FireServer(true)
			else
				game:GetService("ReplicatedStorage").Remotes.heal_tang123asd:FireServer(false)
			end
		end
	})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer
local playerName = player.Name

local running = false 

MiscSection:AddToggle({
    Name = "Auto Muzan's Blood",
    Default = false,
    Callback = function(value)
        running = value
        if running then
            task.spawn(function()
                while running do
                    local muzan = Workspace:FindFirstChild("Muzan")
                    local muzanSpawnPos = muzan and muzan:FindFirstChild("SpawnPos")

                    if muzan and muzanSpawnPos then
                        local args1 = {
                            [1] = "AddQuest",
                            [2] = "Players." .. playerName .. ".PlayerGui.Npc_Dialogue.LocalScript.Functions",
                            [3] = 313.62536329600016,
                            [4] = ReplicatedStorage:WaitForChild("Player_Data"):WaitForChild(playerName):WaitForChild("Quest"),
                            [5] = {
                                ["Current"] = "Join Muzan's demon ranks",
                                ["List"] = {
                                    [1] = {
                                        ["Name"] = "Collect Blue Spider Lily flowers",
                                        ["Progress"] = {0, 5}
                                    },
                                    [2] = {
                                        ["Name"] = "Bring Doctor Higoshima to Muzan",
                                        ["Progress"] = {0, 1}
                                    }
                                }
                            }
                        }

                        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args1))

                        task.wait(5)

                        local args2 = {
                            [1] = "Quest_add",
                            [2] = "Players." .. playerName .. ".PlayerGui.Npc_Dialogue.LocalScript.Functions",
                            [3] = 340.91232565300015,
                            [4] = {},
                            [5] = player,
                            [6] = "doctorhigoshimabringbacktomuzan"
                        }

                        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args2))

                        task.wait(2)

                        for i = 1, 5 do
                            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("lilyredeem"):FireServer()
                            task.wait(1)
                        end
                    end
                    task.wait(33)  
                end
            end)
        end
    end
})


	local autoMuzanEnabled = false
	local autoMuzanLoop = nil
	local questConnectionAdd = nil
	local questConnectionRemove = nil

	MiscSection:AddToggle({
		Name = "Auto Muzan's Quest",
		Default = false,
		Callback = function(state)
			autoMuzanEnabled = state

			if state then

				task.spawn(function()

					local ReplicatedStorage = game:GetService("ReplicatedStorage")
					local Players = game:GetService("Players")

					local player = Players.LocalPlayer
					local playerName = player.Name


					local validQuests = {
						["Eliminate Inosuke"] = true,
						["Eliminate Rengoku"] = true,
						["Eliminate Tengen"] = true,
						["Eliminate Snow Trainee"] = true,
						["Eliminate Renpeke"] = true,
						["Eliminate Muichiro Tokito"] = true
					}


					local questFolder = ReplicatedStorage:WaitForChild("Muzan_Quests"):WaitForChild(playerName)
					local remote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("muzan_quest_ting")

					local currentQuest = nil


					local function claimQuest(questName)
						remote:FireServer(questName, "Do")
						currentQuest = questName
					end

					local function checkForNewQuest()
						if not autoMuzanEnabled then return end
						for _, quest in ipairs(questFolder:GetChildren()) do
							if validQuests[quest.Name] and currentQuest ~= quest.Name then
								claimQuest(quest.Name)
								break
							end
						end
					end


					questConnectionAdd = questFolder.ChildAdded:Connect(function(child)
						if autoMuzanEnabled and validQuests[child.Name] and currentQuest ~= child.Name then
							claimQuest(child.Name)
						end
					end)


					questConnectionRemove = questFolder.ChildRemoved:Connect(function(child)
						if autoMuzanEnabled and child.Name == currentQuest then
							currentQuest = nil
							task.wait(1)
							checkForNewQuest()
						end
					end)


					checkForNewQuest()


					while autoMuzanEnabled do
						task.wait(180)
						checkForNewQuest()
					end
				end)
			else

				if questConnectionAdd then questConnectionAdd:Disconnect() end
				if questConnectionRemove then questConnectionRemove:Disconnect() end
			end
		end
	})


	MiscSection:AddToggle({ 
		Name = "Change Koketsu Arrow CoolDown",
		Flag = "ChangeKoketsuArrowCoolDown",
		Keybind = false,
		Callback = function(v)
			if v then

				local skills = game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("Power_Adder"):WaitForChild("Arrow"):WaitForChild("Skills")
				local koketsuArrow = skills:WaitForChild("Koketsu Arrow")
				local cooldown = koketsuArrow:FindFirstChild("CoolDown")

				if cooldown and cooldown:IsA("ValueBase") then
					cooldown.Value = 6
				end
			end
		end
	})




	MiscSection:AddToggle({
		Name = "Auto Med",
		Flag = "AutoMed",
		Keybind = false,
		Callback = function(v)
			getgenv().AutoMed = v
		end
	})

	MiscSection:AddToggle({
		Name = "Auto Split",
		Flag = "AutoSplit",
		Keybind = false,
		Callback = function(v)
			getgenv().AutoSplit = v
		end
	})

	MiscSection:AddToggle({
		Name = "Auto Cup Game",
		Flag = "AutoCupGame",
		Keybind = false,
		Callback = function(v)
			getgenv().AutoCupGame = v
		end
	})

	MiscSection:AddToggle({
		Name = "Auto Push Up",
		Flag = "AutoPushUp",
		Keybind = false,
		Callback = function(v)
			getgenv().AutoPushUp = v
		end
	})

	MiscSection:AddToggle({
		Name = "Auto Aim",
		Flag = "AutoAim",
		Keybind = false,
		Callback = function(v)
			getgenv().AutoAim = v
		end
	})


	local Formatted = ("%svs"):format(Player.Name)
	local autoClashRunning = false
	local autoClashThread = nil

	-- Hàm chính Auto Clash
	function StartAutoClash()
		if autoClashRunning then return end -- tránh chạy nhiều vòng
		autoClashRunning = true
		autoClashThread = task.spawn(function()
			while autoClashRunning and IsOpen() do
				local ClashFolder = Debree:FindFirstChild("clash_folder") 
				if ClashFolder then 
					for _, v in next, ClashFolder:GetChildren() do 
						if v.Name:find(Formatted) then 
							local Points = v:FindFirstChild(Player.Name) 
							if Points then 
								task.spawn(function()
									task.wait(7.5)
									game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer("Change_Value", Points, 99999999999)
								end)
							end
						else 
							for _, Points in next, v:GetChildren() do 
								if Players:FindFirstChild(Points.Name) then 
									task.spawn(function()
										task.wait(7.5)
										game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer("Change_Value", Points, 99999999999)
									end)
								end 
							end 
						end 
					end 
				end

				-- Clash đang diễn ra
				local Found = Clashing:FindFirstChild(Player.Name)
				local Points = Found and Found:FindFirstChild("Points") 
				if Points then
					game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer("Change_Value", Points, 99999999999)  
				end

				task.wait(1) -- Giảm spam
			end
		end)
	end

	-- Hàm dừng Auto Clash
	function StopAutoClash()
		autoClashRunning = false
	end

	-- GUI Toggle để bật/tắt Auto Clash
	Ect:AddToggle({
		Name = "Auto Clash",
		Value = false, 
		Flag = "AutoClash",
		Callback = function(State)
			if State then
				StartAutoClash()
			else
				StopAutoClash()
			end
		end
	})


	local flesh = 0
	local enmu = 0
	local fly = 0
	local movedToCodeAndSafe = false

	Ect:AddToggle({
		Name = "Auto Mugen", 
		Value = false, 
		Flag = "AutoMugen",
		Callback = function(State)
			task.spawn(function()
				if placeId == 11468034852 then
				
					local player = game.Players.LocalPlayer
					local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

					if hrp and not movedToCodeAndSafe then 


						local codePos = Vector3.new(1950.95, 24.48, -76.23)
						Tween(CFrame.new(codePos))
						task.wait(2)

						-- Di chuyển đến Safe
						local safePos = Vector3.new(1699.58, 25, -112.58)
						Tween(CFrame.new(safePos))

						movedToCodeAndSafe = true
					end
					task.wait(0.5)

					while State and IsOpen() do
						local config = workspace:FindFirstChild("Mobs") and workspace.Mobs:FindFirstChild("Npc_Configuration")

						if config then
							local hasEnmu = config:FindFirstChild("Enmu") ~= nil
							local hasFlesh = config:FindFirstChild("Flesh Monster") ~= nil
							local hasAkaza = config:FindFirstChild("Akaza") ~= nil

							-- Phát hiện Enmu
							if hasEnmu then
								if enmu == 0 then
									enmu = 1
									print(">> Enmu xuất hiện.")
								end
							else
								if enmu == 1 then
									enmu = 0
									print(">> Enmu biến mất.")
									getgenv().Arrow = false
									pcall(stopArrow275Loop)
									print(">> Mất Enmu nhưng chưa có Flesh Monster => tắt startArrow275Loop")
								end
							end

							-- Phát hiện Flesh Monster
							if hasFlesh then
								if flesh == 0 then
									flesh = 1
									print(">> Flesh Monster xuất hiện => chờ 5s rồi bật startArrow275Loop")
									if not getgenv().Arrow then
										task.delay(5, function()
											getgenv().Arrow = true
											pcall(startArrow275Loop)
											StartAutoClash()
											print(">> bật AutoClash")
										end)
									end
								end
							end

							-- Nếu có Akaza trong khi AutoClash đang chạy
							if hasAkaza and autoClashRunning then
								StopAutoClash()
								print(">> tắt AutoClash")

								local player = game.Players.LocalPlayer
								local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

								if hrp and fly == 0 and not hasFlesh then
									fly = 1

									local targetPosition = Vector3.new(-1328.95, 739.72, -888.61)
									Tween(CFrame.new(targetPosition))

									print(">> Akaza phát hiện => Di chuyển đến vị trí an toàn")
								end
							end
						end

						task.wait(1)
					end
				end
			end)
		end
	})



	local AutoEatSouls = false

	Ect:AddToggle({
		Name = "Auto Eat Souls",
		Value = false,
		Flag = "Souls",
		Callback = function(State)
			AutoEatSouls = State
		end
	})

	Ect:AddToggle({
		Name = "Auto Collect Orbs",
		Value = false,
		Flag = "AutoOrb",
		Callback = function(State)
			LIPJRMAL = State

			task.spawn(function()
				while LIPJRMAL and IsOpen() do
					if not HumanoidRootPart or not HumanoidRootPart.Parent then
						HumanoidRootPart = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
					end

					for _, v in ipairs(Map:GetChildren()) do
						if v:IsA("Model") and v:FindFirstChild("Sound") then
							for _, v1 in ipairs(v:GetChildren()) do
								if v1:FindFirstChild("TouchInterest") then
									v:PivotTo(HumanoidRootPart.CFrame)
								end
							end
						end
					end

					task.wait(0.5)
				end
			end)
		end
	})


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local Player = Players.LocalPlayer
local AutoMoveThread = nil

getgenv().AutoMoveEnabled = false

local function smoothMoveTo(position, speed)
    local hrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp or not position then return end

    local startPos = hrp.Position
    local delta = position - startPos
    local duration = delta.Magnitude / speed
    local startTime = tick()

    while tick() - startTime < duration and getgenv().AutoMoveEnabled do
        local t = math.min((tick() - startTime) / duration, 1)
        local nextPos = startPos + delta * t
        hrp.Velocity = Vector3.zero
        hrp.CFrame = CFrame.new(nextPos)
        RunService.Heartbeat:Wait()
    end

    if hrp then
        hrp.Velocity = Vector3.zero
        hrp.CFrame = CFrame.new(position)
    end
end

local function applyFloat(targetPosition)
    local character = Player.Character
    local hrp = character and character:FindFirstChild("HumanoidRootPart")
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")
    if not hrp or not humanoid then return end

    if hrp:FindFirstChild("FloatPosition") then hrp.FloatPosition:Destroy() end
    if hrp:FindFirstChild("BodyGyro") then hrp.BodyGyro:Destroy() end

    local bodyPos = Instance.new("BodyPosition")
    bodyPos.Name = "FloatPosition"
    bodyPos.MaxForce = Vector3.new(1e5, 1e5, 1e5)
    bodyPos.Position = targetPosition
    bodyPos.P = 3000
    bodyPos.D = 100
    bodyPos.Parent = hrp

    local gyro = Instance.new("BodyGyro")
    gyro.Name = "BodyGyro"
    gyro.MaxTorque = Vector3.new(1e5, 1e5, 1e5)
    gyro.P = 3000
    gyro.CFrame = hrp.CFrame
    gyro.Parent = hrp

    humanoid.AutoRotate = false
    humanoid.WalkSpeed = 0
    humanoid.JumpPower = 0
end

local function restoreControl()
    local character = Player.Character
    local hrp = character and character:FindFirstChild("HumanoidRootPart")
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")
    if not hrp or not humanoid then return end

    if hrp:FindFirstChild("FloatPosition") then hrp.FloatPosition:Destroy() end
    if hrp:FindFirstChild("BodyGyro") then hrp.BodyGyro:Destroy() end

    humanoid.AutoRotate = true
    humanoid.WalkSpeed = 16
    humanoid.JumpPower = 50
end

local CachedSpawnPositions = {}
local LastUpdateTime = 0
local UpdateInterval = 10

local function getValidMobPositions()
    local hrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return {} end

    local mobsFolder = Workspace:FindFirstChild("Mobs")
    if not mobsFolder then return {} end

    local validPositions = {}
    local mobList = mobsFolder:GetChildren()


    local maxMobsToCheck = 15
    for i = 1, math.min(#mobList, maxMobsToCheck) do
        local mob = mobList[i]
        local config = mob:FindFirstChild("Npc_Configuration")
        local spawnValue = config and config:FindFirstChild("spawnlocaitonasd123")
        if spawnValue and typeof(spawnValue.Value) == "Vector3" then
            local pos = spawnValue.Value
            local dist = (hrp.Position - pos).Magnitude
            table.insert(validPositions, {pos = pos, distance = dist})
        end
    end

    return validPositions
end


local function updateSpawnCache()
    local positions = getValidMobPositions()

    table.sort(positions, function(a, b)
        return a.distance > b.distance
    end)

    CachedSpawnPositions = {}
    for i = 1, math.min(3, #positions) do
        local adjustedPos = positions[i].pos - Vector3.new(0, 150, 0)
        table.insert(CachedSpawnPositions, adjustedPos)
    end

    LastUpdateTime = tick()
end

local function getFurthestSpawnLocations()
    if tick() - LastUpdateTime > UpdateInterval then
        updateSpawnCache()
    end
    return CachedSpawnPositions
end

local function startAutoMoveLoop()
    if AutoMoveThread then return end

    AutoMoveThread = task.spawn(function()
        repeat task.wait() until Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")

        while getgenv().AutoMoveEnabled do
            local mobsFolder = Workspace:FindFirstChild("Mobs")
            if not mobsFolder then
                break
            end

            local mobCount = #mobsFolder:GetChildren()

            if mobCount > 10 then
                local locations = getFurthestSpawnLocations()
                for _, pos in ipairs(locations) do
                    if not getgenv().AutoMoveEnabled then break end
                    smoothMoveTo(pos, 200)
                    applyFloat(pos)
                    task.wait(0.5)
                end
                task.wait(20)

            elseif mobCount > 2 then
                local locations = getFurthestSpawnLocations()
                for _, pos in ipairs(locations) do
                    if not getgenv().AutoMoveEnabled then break end
                    smoothMoveTo(pos, 200)
                    applyFloat(pos)
                    task.wait(0.5)
                end
                task.wait(30)

            else
                task.wait(10)
            end
        end
    end)
end

local function stopAutoMove()
    getgenv().AutoMoveEnabled = false
    restoreControl()
    if AutoMoveThread then
        task.cancel(AutoMoveThread)
        AutoMoveThread = nil
    end
end

Ect:AddToggle({
    Name = "Auto Dungeon",
    Default = false,
    Callback = function(state)
        getgenv().AutoMoveEnabled = state
        if state then
            startAutoMoveLoop()
        else
            stopAutoMove()
        end
    end
})


Ect:AddButton({
    Name = "Fly",
    Default = false,
    Callback = function(state)
        getgenv().Fly = state
        if state then
			local main = Instance.new("ScreenGui")
			local Frame = Instance.new("Frame")
			local up = Instance.new("TextButton")
			local down = Instance.new("TextButton")
			local onof = Instance.new("TextButton")
			local TextLabel = Instance.new("TextLabel")
			local plus = Instance.new("TextButton")
			local speed = Instance.new("TextLabel")
			local mine = Instance.new("TextButton")
			local closebutton = Instance.new("TextButton")
			local mini = Instance.new("TextButton")
			local mini2 = Instance.new("TextButton")

			main.Name = "main"
			main.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
			main.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
			main.ResetOnSpawn = false

			Frame.Parent = main
			Frame.BackgroundColor3 = Color3.fromRGB(163, 255, 137)
			Frame.BorderColor3 = Color3.fromRGB(103, 221, 213)
			Frame.Position = UDim2.new(0.100320168, 0, 0.379746825, 0)
			Frame.Size = UDim2.new(0, 190, 0, 57)

			up.Name = "up"
			up.Parent = Frame
			up.BackgroundColor3 = Color3.fromRGB(79, 255, 152)
			up.Size = UDim2.new(0, 44, 0, 28)
			up.Font = Enum.Font.SourceSans
			up.Text = "UP"
			up.TextColor3 = Color3.fromRGB(0, 0, 0)
			up.TextSize = 14.000

			down.Name = "down"
			down.Parent = Frame
			down.BackgroundColor3 = Color3.fromRGB(215, 255, 121)
			down.Position = UDim2.new(0, 0, 0.491228074, 0)
			down.Size = UDim2.new(0, 44, 0, 28)
			down.Font = Enum.Font.SourceSans
			down.Text = "DOWN"
			down.TextColor3 = Color3.fromRGB(0, 0, 0)
			down.TextSize = 14.000

			onof.Name = "onof"
			onof.Parent = Frame
			onof.BackgroundColor3 = Color3.fromRGB(255, 249, 74)
			onof.Position = UDim2.new(0.702823281, 0, 0.491228074, 0)
			onof.Size = UDim2.new(0, 56, 0, 28)
			onof.Font = Enum.Font.SourceSans
			onof.Text = "fly"
			onof.TextColor3 = Color3.fromRGB(0, 0, 0)
			onof.TextSize = 14.000

			TextLabel.Parent = Frame
			TextLabel.BackgroundColor3 = Color3.fromRGB(242, 60, 255)
			TextLabel.Position = UDim2.new(0.469327301, 0, 0, 0)
			TextLabel.Size = UDim2.new(0, 100, 0, 28)
			TextLabel.Font = Enum.Font.SourceSans
			TextLabel.Text = "FLY GUI V3"
			TextLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
			TextLabel.TextScaled = true
			TextLabel.TextSize = 14.000
			TextLabel.TextWrapped = true

			plus.Name = "plus"
			plus.Parent = Frame
			plus.BackgroundColor3 = Color3.fromRGB(133, 145, 255)
			plus.Position = UDim2.new(0.231578946, 0, 0, 0)
			plus.Size = UDim2.new(0, 45, 0, 28)
			plus.Font = Enum.Font.SourceSans
			plus.Text = "+"
			plus.TextColor3 = Color3.fromRGB(0, 0, 0)
			plus.TextScaled = true
			plus.TextSize = 14.000
			plus.TextWrapped = true

			speed.Name = "speed"
			speed.Parent = Frame
			speed.BackgroundColor3 = Color3.fromRGB(255, 85, 0)
			speed.Position = UDim2.new(0.468421042, 0, 0.491228074, 0)
			speed.Size = UDim2.new(0, 44, 0, 28)
			speed.Font = Enum.Font.SourceSans
			speed.Text = "1"
			speed.TextColor3 = Color3.fromRGB(0, 0, 0)
			speed.TextScaled = true
			speed.TextSize = 14.000
			speed.TextWrapped = true

			mine.Name = "mine"
			mine.Parent = Frame
			mine.BackgroundColor3 = Color3.fromRGB(123, 255, 247)
			mine.Position = UDim2.new(0.231578946, 0, 0.491228074, 0)
			mine.Size = UDim2.new(0, 45, 0, 29)
			mine.Font = Enum.Font.SourceSans
			mine.Text = "-"
			mine.TextColor3 = Color3.fromRGB(0, 0, 0)
			mine.TextScaled = true
			mine.TextSize = 14.000
			mine.TextWrapped = true

			closebutton.Name = "Close"
			closebutton.Parent = main.Frame
			closebutton.BackgroundColor3 = Color3.fromRGB(225, 25, 0)
			closebutton.Font = "SourceSans"
			closebutton.Size = UDim2.new(0, 45, 0, 28)
			closebutton.Text = "X"
			closebutton.TextSize = 30
			closebutton.Position =  UDim2.new(0, 0, -1, 27)

			mini.Name = "minimize"
			mini.Parent = main.Frame
			mini.BackgroundColor3 = Color3.fromRGB(192, 150, 230)
			mini.Font = "SourceSans"
			mini.Size = UDim2.new(0, 45, 0, 28)
			mini.Text = "-"
			mini.TextSize = 40
			mini.Position = UDim2.new(0, 44, -1, 27)

			mini2.Name = "minimize2"
			mini2.Parent = main.Frame
			mini2.BackgroundColor3 = Color3.fromRGB(192, 150, 230)
			mini2.Font = "SourceSans"
			mini2.Size = UDim2.new(0, 45, 0, 28)
			mini2.Text = "+"
			mini2.TextSize = 40
			mini2.Position = UDim2.new(0, 44, -1, 57)
			mini2.Visible = false

			speeds = 1

			local speaker = game:GetService("Players").LocalPlayer

			local chr = game.Players.LocalPlayer.Character
			local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")

			nowe = false

			game:GetService("StarterGui"):SetCore("SendNotification", { 
				Title = "FLY GUI V3";
				Text = "BY XNEO";
				Icon = "rbxthumb://type=Asset&id=5107182114&w=150&h=150"})
			Duration = 5;

			Frame.Active = true -- main = gui
			Frame.Draggable = true

			onof.MouseButton1Down:connect(function()

				if nowe == true then
					nowe = false

					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,true)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,true)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,true)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,true)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,true)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,true)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,true)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,true)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,true)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,true)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running,true)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,true)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,true)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,true)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,true)
					speaker.Character.Humanoid:ChangeState(Enum.HumanoidStateType.RunningNoPhysics)
				else 
					nowe = true



					for i = 1, speeds do
						spawn(function()

							local hb = game:GetService("RunService").Heartbeat	


							tpwalking = true
							local chr = game.Players.LocalPlayer.Character
							local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
							while tpwalking and hb:Wait() and chr and hum and hum.Parent do
								if hum.MoveDirection.Magnitude > 0 then
									chr:TranslateBy(hum.MoveDirection)
								end
							end

						end)
					end
					game.Players.LocalPlayer.Character.Animate.Disabled = true
					local Char = game.Players.LocalPlayer.Character
					local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

					for i,v in next, Hum:GetPlayingAnimationTracks() do
						v:AdjustSpeed(0)
					end
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,false)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,false)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,false)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,false)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,false)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,false)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,false)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,false)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,false)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,false)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running,false)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,false)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,false)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,false)
					speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,false)
					speaker.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
				end




				if game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R6 then



					local plr = game.Players.LocalPlayer
					local torso = plr.Character.Torso
					local flying = true
					local deb = true
					local ctrl = {f = 0, b = 0, l = 0, r = 0}
					local lastctrl = {f = 0, b = 0, l = 0, r = 0}
					local maxspeed = 50
					local speed = 0


					local bg = Instance.new("BodyGyro", torso)
					bg.P = 9e4
					bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
					bg.cframe = torso.CFrame
					local bv = Instance.new("BodyVelocity", torso)
					bv.velocity = Vector3.new(0,0.1,0)
					bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
					if nowe == true then
						plr.Character.Humanoid.PlatformStand = true
					end
					while nowe == true or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 do
						game:GetService("RunService").RenderStepped:Wait()

						if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
							speed = speed+.5+(speed/maxspeed)
							if speed > maxspeed then
								speed = maxspeed
							end
						elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
							speed = speed-1
							if speed < 0 then
								speed = 0
							end
						end
						if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
							bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
							lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
						elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
							bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
						else
							bv.velocity = Vector3.new(0,0,0)
						end
						--	game.Players.LocalPlayer.Character.Animate.Disabled = true
						bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
					end
					ctrl = {f = 0, b = 0, l = 0, r = 0}
					lastctrl = {f = 0, b = 0, l = 0, r = 0}
					speed = 0
					bg:Destroy()
					bv:Destroy()
					plr.Character.Humanoid.PlatformStand = false
					game.Players.LocalPlayer.Character.Animate.Disabled = false
					tpwalking = false




				else
					local plr = game.Players.LocalPlayer
					local UpperTorso = plr.Character.UpperTorso
					local flying = true
					local deb = true
					local ctrl = {f = 0, b = 0, l = 0, r = 0}
					local lastctrl = {f = 0, b = 0, l = 0, r = 0}
					local maxspeed = 50
					local speed = 0


					local bg = Instance.new("BodyGyro", UpperTorso)
					bg.P = 9e4
					bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
					bg.cframe = UpperTorso.CFrame
					local bv = Instance.new("BodyVelocity", UpperTorso)
					bv.velocity = Vector3.new(0,0.1,0)
					bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
					if nowe == true then
						plr.Character.Humanoid.PlatformStand = true
					end
					while nowe == true or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 do
						wait()

						if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
							speed = speed+.5+(speed/maxspeed)
							if speed > maxspeed then
								speed = maxspeed
							end
						elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
							speed = speed-1
							if speed < 0 then
								speed = 0
							end
						end
						if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
							bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
							lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
						elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
							bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
						else
							bv.velocity = Vector3.new(0,0,0)
						end

						bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
					end
					ctrl = {f = 0, b = 0, l = 0, r = 0}
					lastctrl = {f = 0, b = 0, l = 0, r = 0}
					speed = 0
					bg:Destroy()
					bv:Destroy()
					plr.Character.Humanoid.PlatformStand = false
					game.Players.LocalPlayer.Character.Animate.Disabled = false
					tpwalking = false



				end





			end)

			local tis

			up.MouseButton1Down:connect(function()
				tis = up.MouseEnter:connect(function()
					while tis do
						wait()
						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,1,0)
					end
				end)
			end)

			up.MouseLeave:connect(function()
				if tis then
					tis:Disconnect()
					tis = nil
				end
			end)

			local dis

			down.MouseButton1Down:connect(function()
				dis = down.MouseEnter:connect(function()
					while dis do
						wait()
						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,-1,0)
					end
				end)
			end)

			down.MouseLeave:connect(function()
				if dis then
					dis:Disconnect()
					dis = nil
				end
			end)


			game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(char)
				wait(0.7)
				game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
				game.Players.LocalPlayer.Character.Animate.Disabled = false

			end)


			plus.MouseButton1Down:connect(function()
				speeds = speeds + 1
				speed.Text = speeds
				if nowe == true then


					tpwalking = false
					for i = 1, speeds do
						spawn(function()

							local hb = game:GetService("RunService").Heartbeat	


							tpwalking = true
							local chr = game.Players.LocalPlayer.Character
							local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
							while tpwalking and hb:Wait() and chr and hum and hum.Parent do
								if hum.MoveDirection.Magnitude > 0 then
									chr:TranslateBy(hum.MoveDirection)
								end
							end

						end)
					end
				end
			end)
			mine.MouseButton1Down:connect(function()
				if speeds == 1 then
					speed.Text = 'cannot be less than 1'
					wait(1)
					speed.Text = speeds
				else
					speeds = speeds - 1
					speed.Text = speeds
					if nowe == true then
						tpwalking = false
						for i = 1, speeds do
							spawn(function()

								local hb = game:GetService("RunService").Heartbeat	


								tpwalking = true
								local chr = game.Players.LocalPlayer.Character
								local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
								while tpwalking and hb:Wait() and chr and hum and hum.Parent do
									if hum.MoveDirection.Magnitude > 0 then
										chr:TranslateBy(hum.MoveDirection)
									end
								end

							end)
						end
					end
				end
			end)

			closebutton.MouseButton1Click:Connect(function()
				main:Destroy()
			end)

			mini.MouseButton1Click:Connect(function()
				up.Visible = false
				down.Visible = false
				onof.Visible = false
				plus.Visible = false
				speed.Visible = false
				mine.Visible = false
				mini.Visible = false
				mini2.Visible = true
				main.Frame.BackgroundTransparency = 1
				closebutton.Position =  UDim2.new(0, 0, -1, 57)
			end)

			mini2.MouseButton1Click:Connect(function()
				up.Visible = true
				down.Visible = true
				onof.Visible = true
				plus.Visible = true
				speed.Visible = true
				mine.Visible = true
				mini.Visible = true
				mini2.Visible = false
				main.Frame.BackgroundTransparency = 0 
				closebutton.Position =  UDim2.new(0, 0, -1, 27)
			end)
        end
    end
})

	Ect:AddButton({
		Name = "Reset",
		Callback = function()
			Humanoid.Health = 0 
			task.wait(0.5)
			Humanoid.Health = 0
		end 
	})

	--// Actual Code \\--

	-- Hàm cập nhật danh sách địa điểm & Bosses
	function UpdateLists()
		local LocationsToUse, BossesToUse = {}, {}

		-- Gán danh sách và giá trị mặc định theo map
		if SelectedMap == "Map1" then
			LocationsToUse = Map1List
			BossesToUse = BossesMap1List
			SelectedArea = "Butterfly Mension"
		elseif SelectedMap == "Map2" then
			LocationsToUse = Map2List
			BossesToUse = BossesMap2List
			SelectedArea = "Cave 1"
		else
			SelectedArea = nil
		end

		-- Xóa dropdown cũ nếu tồn tại
		if LocationsDropdown then LocationsDropdown:Remove() end
		if BossesDropdown then BossesDropdown:Remove() end

		-- Tạo dropdown mới và gán giá trị mặc định
		LocationsDropdown = Teleports:AddDropdown({
			Name = "Locations",
			List = LocationsToUse,
			Flag = "LocationSelect",
			Selected = SelectedArea, 
			Callback = function(State)
				SelectedArea = State
			end
		})

		UpdateActiveBossLocations()
	end

	function UpdateActiveBossLocations() 
		ActiveBossLocations = {}  
		if SelectedMap == "Map1" then 
			ActiveBossLocations = BossLocationsMap1 
		elseif SelectedMap == "Map2" then 
			ActiveBossLocations = BossLocationsMap2 
		else 
			return 
		end 
	end


	if placeId == 13883279773 or placeId == 17387475546 then
		mapName = "Map1"
	elseif placeId == 13883059853 or placeId == 17387482786 then
		mapName = "Map2"
	end

	SelectedMap = mapName
	UpdateLists()

	--// Auto Collect Chest \\--
	spawn(function()
		while task.wait() do
			if AutoCollectChest then
				local success, err = pcall(function()
					local workspace = game:GetService("Workspace")
					local debris = workspace:FindFirstChild("Debree")
					if debris then
						for _, v in pairs(debris:GetChildren()) do
							if v.Name == "Loot_Chest" and v:FindFirstChild("Drops") then
								for i, c in pairs(v.Drops:GetChildren()) do
									if v:FindFirstChild("Add_To_Inventory") then
										v["Add_To_Inventory"]:InvokeServer(c.Name)
										delay(1, function()
											if c then
												c:Destroy()
											end
										end)
									end
								end
							end
						end
					end
				end)
				if not success then
					warn("AutoCollectChest error: ", err)
				end
			end
		end
	end)


	--Eat souls--
	task.spawn(function()
		while task.wait(0.5) do
			if AutoEatSouls then
				for _, v in pairs(workspace.Debree:GetChildren()) do
					if v.Name == "Soul" then
						local Handle = v:FindFirstChild("Handle")
						local Eat = Handle and Handle:FindFirstChild("Eatthedamnsoul")
						if Eat then
							Eat:FireServer()
						end
					end
				end
			end
		end
	end)


	--// Damage Log Spoofer \\--
	spawn(function()
		while task.wait() do
			if getgenv().hide_userdmg == true then
				local user = game:GetService("Players").LocalPlayer.Name
				if game:GetService("Players")[tostring(user)].PlayerGui["Pop_Ups"].Bosshp["Damage_Log"]:FindFirstChild(tostring(user)) then
				game:GetService("Players")[tostring(user)].PlayerGui["Pop_Ups"].Bosshp["Damage_Log"][tostring(user)].txt.Text = "Blackout Blackout Blackout"
				end
			end
		end
	end)

	--// Auto Med and Auto Split \\--
	spawn(function()
		while task.wait() do
			if getgenv().AutoMed then
				pcall(function()
					game:GetService("Players").LocalPlayer.PlayerGui.ExcessGuis["Meditate_gui"].Holder.LocalScript.Value.Value = 100
				end)
			end
		end
	end)

	spawn(function()
		while task.wait() do
			if getgenv().AutoSplit then
				pcall(function()
					game:GetService("Players").LocalPlayer.PlayerGui.ExcessGuis["boulder_split_ui"].Holder.LocalScript.Value.Value = 10000
				end)
			end
		end
	end)

	spawn(function()
		while task.wait() do
			if getgenv().AutoCupGame then
				pcall(function()
					game:GetService("Players").LocalPlayer.PlayerGui.ExcessGuis["cup_game_gui"].Holder.cup_game_script123.Value.Value = 100
				end)
			end
		end
	end)

	spawn(function()
		while task.wait() do
			if getgenv().AutoPushUp then
				pcall(function()
					game:GetService("Players").LocalPlayer.PlayerGui.ExcessGuis["Push_Up_Gui"].Holder.push_up_mat_local_script.Value.Value = 100
				end)
			end
		end
	end)


	spawn(function()
		while task.wait() do
			if getgenv().AutoAim then
				pcall(function()
					game:GetService("Players").LocalPlayer.PlayerGui.ExcessGuis["chairui"].Holder.LocalScript.Value.Value = 100
				end)
			end
		end
	end)

	--// Kill Aura \\-- 
	task.spawn(function()
		while task.wait() do
			if getgenv().KillAura then
				if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						if (not debounce) and ((not game.Players.LocalPlayer:FindFirstChild("combotangasd123")) or game.Players.LocalPlayer:FindFirstChild("combotangasd123") and game.Players.LocalPlayer:FindFirstChild("combotangasd123").Value < 1) then 
						debounce = true 
						attack(attackMethods[Method])
						task.wait(1)
						debounce = false
					end
				end
			end
		end
	end)



	getgenv().Distance = 10
	getgenv().tweenspeed = 200


	--// Farm \\--
	function getclosestSkills(parentFolder)
		local closestEntity = nil
		local closestDistance = math.huge
		local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
		local entities = parentFolder:GetDescendants()

		for _, entity in ipairs(entities) do
			if entity:IsA("Model") then
				local humanoid = entity:FindFirstChild("Humanoid")
				if humanoid and humanoid.Health > 0 then
					local modelCFrame = nil
					if entity.GetModelCFrame and type(entity.GetModelCFrame) == "function" then
						modelCFrame = entity:GetModelCFrame()
					end
					if modelCFrame then
						local distance = (entity:GetModelCFrame().Position - playerPosition).Magnitude
						if distance < closestDistance then
							closestDistance = distance
							closestEntity = entity
						end
					end	

				end
			end
		end
		return closestEntity
	end

	
	--// Arrow Kill Aura \\--
	local plr = game.Players.LocalPlayer
	local arrow275Loop = nil

	function resetArrow275()
		if arrow275Loop then
			task.cancel(arrow275Loop)
			arrow275Loop = nil
		end
	end

	function startArrow275Loop()
		resetArrow275()  
		arrow275Loop = task.spawn(function()
			while getgenv().Arrow do
				if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
					local parentFolder = game:GetService("Workspace").Mobs
					local v = getclosestSkills(parentFolder)

					while not v and getgenv().Arrow do
						task.wait(0.5)
						v = getclosestSkills(parentFolder)
					end

					local modelCFrame = nil
					if v and v.GetModelCFrame and type(v.GetModelCFrame) == "function" then
						modelCFrame = v:GetModelCFrame()
					end

					while not modelCFrame and getgenv().Arrow do
						task.wait(0.1)
						if v and v.GetModelCFrame and type(v.GetModelCFrame) == "function" then
							modelCFrame = v:GetModelCFrame()
						end
						if not v then
							break
						end
					end

					-- Kiểm tra HP trước khi bắn
					local humanoid = v and v:FindFirstChildOfClass("Humanoid")
					if modelCFrame and humanoid and humanoid.Health > 0 then
						game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(
							"arrow_knock_back_damage",
							plr.Character,
							modelCFrame,
							v,
							200,
							200
						)
						task.wait(0.275)
					end
				end
			end
			resetArrow275()
		end)
	end


	spawn(function()
		while task.wait() do
			if getgenv().Arrow then
				if not arrow275Loop then
					startArrow275Loop()
				end
			else
				resetArrow275()
			end
		end
	end)



	spawn(function()
		while task.wait() do
			if getgenv().Arrow or getgenv().TargetPlayersArrow or getgenv().AllArrow then
				if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
					game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer("skil_ting_asd",game:GetService("Players").LocalPlayer,"arrow_knock_back",5)
					task.wait(10)
				end
			end
		end
	end)


	--AuraArrow[NoLag]--
	local plr = game.Players.LocalPlayer
	local lastCharacter = nil
	local arrowNoLagLoop = nil

	function resetNoLagState()
		lastCharacter = nil
		if arrowNoLagLoop then
			task.cancel(arrowNoLagLoop)
			arrowNoLagLoop = nil
		end
	end

	function arrowNoLagAttackLoop()
		arrowNoLagLoop = task.spawn(function()
			while getgenv().AllArrow do
				if not plr.Character or not plr.Character:FindFirstChild("HumanoidRootPart") then
					resetNoLagState()
					break
				end

				local parentFolder = game:GetService("Workspace").Mobs
				local v = nil


				while not v and getgenv().AllArrow do
					v = getclosestSkills(parentFolder)
					task.wait(0.2) 
				end

				while getgenv().AllArrow do
					if not v or not v.Parent or (v:FindFirstChildOfClass("Humanoid") and v:FindFirstChildOfClass("Humanoid").Health <= 0) then
						repeat
							v = getclosestSkills(parentFolder)
							task.wait(0.1) 
						until v or not getgenv().AllArrow
					end


					if v and v.Parent then
						local humanoid = v:FindFirstChildOfClass("Humanoid")
						if humanoid and humanoid.Health > 0 then
							local modelCFrame = v:GetModelCFrame()
							if modelCFrame then
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(
									"arrow_knock_back_damage",
									plr.Character,
									modelCFrame,
									v,
									200,
									200
								)
								task.wait(0.275) 
							end
						end
					end
				end
			end
		end)
	end



	spawn(function()
		while task.wait() do
			if getgenv().AllArrow then
				if plr.Character ~= lastCharacter then
					resetNoLagState()
					lastCharacter = plr.Character
					arrowNoLagAttackLoop()
				elseif not arrowNoLagLoop then
					arrowNoLagAttackLoop()
				end
			else
				resetNoLagState()
			end
		end
	end)


	--// NoClip \\--
	local antifallActive = false 
	spawn(function()
		game:GetService("RunService").Stepped:Connect(function()
			if getgenv().Farm or getgenv().MoveAround or getgenv().AutoCollect or getgenv().AutoMoveEnabled then
				for _, v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
					if v:IsA("BasePart") then
						v.CanCollide = false    
					end
					if v:IsA("Humanoid") then
						v:ChangeState(11)
					end
				end
				if not antifallActive then  -- Check if no clip is already active
					antifallActive = true
					EnableAntiFall()
				end
			else
				if antifallActive then
					antifallActive = false
					DisableAntiFall()
				end
			end
		end)
	end)

	--// Farm Method \\--
	spawn(function()
		while wait() do
			SkillActive = AutoUseSkills and (getgenv().Farm and NearestMobs)
			if FarmMethod == "Above" then
					FarmModes = CFrame.new(0,getgenv().Distance,0) * CFrame.Angles(math.rad(-90),0,0)
				elseif FarmMethod == "Below" then
					FarmModes = CFrame.new(0,-getgenv().Distance,0) * CFrame.Angles(math.rad(90),0,0)
				elseif FarmMethod == "Behind" then
					FarmModes = CFrame.new(0,0,getgenv().Distance)
				end
		end
	end)



	--// Player Stats \\--
local plr = game.Players.LocalPlayer
local function updateLabels()
    local playerData = game:GetService("ReplicatedStorage").Player_Data[plr.Name]
    if playerData then
        local statText = ""
        statText = statText .. "Clan: " .. tostring(playerData.Clan.Value) .. "\n"
        statText = statText .. "Race: " .. raceTable[playerData.Race.Value] .. "\n"
        statText = statText .. "Demon Art Spins: " .. tostring(playerData.Demon_art_Spins.Value) .. "\n"
        statText = statText .. "Clan Spins: " .. tostring(playerData.Spins.Value) .. "\n"
        statText = statText .. "Yen: " .. tostring(playerData.Yen.Value) .. "\n"
        local demonProgressText = string.format("Demon Progress: %d/%d", playerData.DemonProgress[1].Value, playerData.DemonProgress[2].Value)
        statText = statText .. demonProgressText .. "\n"
        local breathingProgressText = string.format("Breathing Progress: %d/%d", playerData.BreathingProgress[1].Value, playerData.BreathingProgress[2].Value)
        statText = statText .. breathingProgressText .. "\n"

        local hackVal = plr:FindFirstChild("hacktanbgasd12312312")
        if hackVal and hackVal:IsA("IntValue") then
            statText = statText .. "Biến kiểm soát [8 = kick]: " .. tostring(hackVal.Value) .. "\n"
        end

        infoLabel:Set(statText)
    end
end

local LastCharacter = game.Players.LocalPlayer.Character



AuraTab:AddToggle({
		Name = "Swamp Aura [Near Mobs]",
		Flag = "Swamp",
		Callback = function(v)
			getgenv().Swamp = v
			if v then

				task.spawn(function()
					while getgenv().Swamp do 
						local bossEntity = getclosest(AllowedBosses, game:GetService("Workspace").Mobs)
						
						if bossEntity and bossEntity:FindFirstChild("Humanoid") and bossEntity.Humanoid.Health > 0 then
							local bossCFrame = bossEntity:GetModelCFrame()
							local distance = (bossCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude

							if distance < 25 then
								local args = {
									[1] = "swamp_puddle_damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = bossCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))     
							end           
						end
						task.wait(0.3)
					end
				end)


				task.spawn(function()
					while getgenv().Swamp do
						if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
							local args = {
								[1] = "skil_ting_asd",
								[2] = game.Players.LocalPlayer,
								[3] = "swampbda_swamp_puddle",
								[4] = 5
							}
							game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))        
							task.wait(9.5)
						end
					end
				end)
			end
		end
	})


AuraTab:AddToggle({
	Name = "Reaper Aura",
	Flag = "Reaper",
	Callback = function(v)
		getgenv().Reaper = v
		if v then

			task.spawn(function()
				while getgenv().Reaper do 
					local target


					if getgenv().selectedPlayerName and getgenv().selectedPlayerName ~= "" then
						target = findPlayerByName(getgenv().selectedPlayerName)
					else
						target = getclosestSkills(game:GetService("Workspace").Mobs)
					end

					if target and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 then
						local targetCFrame
						if target.GetModelCFrame and type(target.GetModelCFrame) == "function" then
							targetCFrame = target:GetModelCFrame()
						end

						if targetCFrame then
							local distance = (targetCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude


							if distance < 25 then
								local args = {
									[1] = "reaper-slash_thing_damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = targetCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))                
							end
						end
					end
					task.wait(2.5)
				end
			end)

			task.spawn(function()
				while getgenv().Reaper do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local args = {
							[1] = "skil_ting_asd",
							[2] = game.Players.LocalPlayer,
							[3] = "reaperbda_reapofdispair",
							[4] = 5
						}
						game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))        
						task.wait(9)
					end
				end
			end)
		end
	end
})




-- Đặt tamariLoop ở ngoài để giữ tham chiếu khi Toggle được gọi lại
if not getgenv().tamariLoop then
	getgenv().tamariLoop = nil
end

AuraTab:AddToggle({
	Name = "Tamari Aura",
	Flag = "Tamari",
	Callback = function(v)
		getgenv().Tamari = v

		local plr = game.Players.LocalPlayer
		local ReplicatedStorage = game:GetService("ReplicatedStorage")
		local Workspace = game:GetService("Workspace")

		local function resetTamari()
			if getgenv().tamariLoop then
				task.cancel(getgenv().tamariLoop)
				getgenv().tamariLoop = nil
			end
		end

		local function startTamariLoop()
			resetTamari()
			getgenv().tamariLoop = task.spawn(function()
				while getgenv().Tamari do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local target = nil

						if getgenv().selectedPlayerName and getgenv().selectedPlayerName ~= "" then
							local selected = game.Players:FindFirstChild(getgenv().selectedPlayerName)
							if selected and selected.Character then
								target = selected.Character
							end
						end

						if not target then
							target = getclosestSkills(Workspace.Mobs)
						end

						while not target and getgenv().Tamari do
							task.wait(0.5)
							target = getclosestSkills(Workspace.Mobs)
						end

						local modelCFrame = nil
						if target then
							if target.GetModelCFrame and type(target.GetModelCFrame) == "function" then
								modelCFrame = target:GetModelCFrame()
							elseif target:FindFirstChild("HumanoidRootPart") then
								modelCFrame = target.HumanoidRootPart.CFrame
							end
						end

						while not modelCFrame and getgenv().Tamari do
							task.wait(0.1)
							if target and target.GetModelCFrame and type(target.GetModelCFrame) == "function" then
								modelCFrame = target:GetModelCFrame()
							elseif target and target:FindFirstChild("HumanoidRootPart") then
								modelCFrame = target.HumanoidRootPart.CFrame
							end
							if not target then break end
						end

						local humanoid = target and target:FindFirstChildOfClass("Humanoid")
						if modelCFrame and humanoid and humanoid.Health > 0 then
							ReplicatedStorage.Remotes.To_Server.Handle_Initiate_S:FireServer(
								"Tamari_Normal_Throw_Damage_new",
								plr.Character,
								modelCFrame,
								target
							)
							task.wait(4)
						end
					end
				end
				resetTamari()
			end)
		end

		-- Vòng lặp chính chỉ được gọi một lần duy nhất
		task.spawn(function()
			while task.wait() do
				if getgenv().Tamari then
					if not getgenv().tamariLoop then
						startTamariLoop()
					end
				else
					resetTamari()
				end
			end
		end)

		-- Luồng phụ kích hoạt skill
		if v then
			task.spawn(function()
				while getgenv().Tamari do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						ReplicatedStorage.Remotes.To_Server.Handle_Initiate_S:FireServer(
							"skil_ting_asd",
							plr,
							"Tamari2_Normal_Throw",
							5
						)
					end
					task.wait(13)
				end
			end)
		end
	end
})


AuraTab:AddToggle({
	Name = "Dream Aura [Near Mobs]",
	Flag = "Dream",
	Callback = function(v)
		getgenv().Dream = v
		if v then
			task.spawn(function()
				while getgenv().Dream do 
					local target = (getgenv().selectedPlayerName and getgenv().selectedPlayerName ~= "") 
						and findPlayerByName(getgenv().selectedPlayerName) 
						or getclosestSkills(game:GetService("Workspace").Mobs)

					if target and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 then
						local targetCFrame = target.GetModelCFrame and target:GetModelCFrame()
						if targetCFrame then
							local distance = (targetCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
							if distance < 40 then
								local args = {
									[1] = "dream_hypnosis_damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = targetCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))                
							end
						end
					end
					task.wait(2.5)
				end
			end)

			task.spawn(function()
				while getgenv().Dream do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local args = {
							[1] = "skil_ting_asd",
							[2] = game.Players.LocalPlayer,
							[3] = "dream_man_hypnosis",
							[4] = 5
						}
						game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))        
						task.wait(18)
					end
				end
			end)
		end
	end
})

AuraTab:AddToggle({
	Name = "Blood Aura [Near Mobs]",
	Flag = "Blood",
	Callback = function(v)
		getgenv().Blood = v
		if v then
			task.spawn(function()
				while getgenv().Blood do 
					local target = (getgenv().selectedPlayerName and getgenv().selectedPlayerName ~= "") 
						and findPlayerByName(getgenv().selectedPlayerName) 
						or getclosestSkills(game:GetService("Workspace").Mobs)

					if target and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 then
						local targetCFrame = target.GetModelCFrame and target:GetModelCFrame()
						if targetCFrame then
							local distance = (targetCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
							if distance < 40 then
								local args = {
									[1] = "blood_burst_blood_shot_damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = targetCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))      
							end
						end
					end
					task.wait(8)
				end
			end)

			task.spawn(function()
				while getgenv().Blood do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local args = {
							[1] = "skil_ting_asd",
							[2] = game.Players.LocalPlayer,
							[3] = "blood_burst_blood_shot",
							[4] = 5
						}
						game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))        
						task.wait(18)
					end
				end
			end)
		end
	end
})

AuraTab:AddToggle({
	Name = "Ice Aura [Near Mobs]",
	Flag = "IceKA",
	Callback = function(v)
		getgenv().IceKA = v
		if v then
			task.spawn(function()
				while getgenv().IceKA do 
					local target = (getgenv().selectedPlayerName and getgenv().selectedPlayerName ~= "") 
						and findPlayerByName(getgenv().selectedPlayerName) 
						or getclosestSkills(game:GetService("Workspace").Mobs)

					if target and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 then
						local targetCFrame = target.GetModelCFrame and target:GetModelCFrame()
						if targetCFrame then
							local distance = (targetCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
							if distance < 40 then
								local args = {
									[1] = "ice_demon_art_wintry_iciles_damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = targetCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))                
							end
						end
					end
					task.wait(2)
				end
			end)

			task.spawn(function()
				while getgenv().IceKA do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local args = {
							[1] = "skil_ting_asd",
							[2] = game.Players.LocalPlayer,
							[3] = "ice_demon_art_wintry_iciles",
							[4] = 5
						}
						game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))        
						task.wait(15)
					end
				end
			end)
		end
	end
})

AuraTab:AddToggle({
	Name = "Shock Aura [Near Mobs]",
	Flag = "Shock",
	Callback = function(v)
		getgenv().Shock = v
		if v then
			task.spawn(function()
				while getgenv().Shock do 
					local target = (getgenv().selectedPlayerName and getgenv().selectedPlayerName ~= "") 
						and findPlayerByName(getgenv().selectedPlayerName) 
						or getclosestSkills(game:GetService("Workspace").Mobs)

					if target and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 then
						local targetCFrame = target.GetModelCFrame and target:GetModelCFrame()
						if targetCFrame then
							local distance = (targetCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
							if distance < 40 then
								local args = {
									[1] = "Akaza_Air_Type_Damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = targetCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))                
							end
						end
					end
					task.wait(4)
				end
			end)

			task.spawn(function()
				while getgenv().Shock do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local args = {
							[1] = "skil_ting_asd",
							[2] = game.Players.LocalPlayer,
							[3] = "akaza_bda_air_type",
							[4] = 5
						}
						game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))
						task.wait(10)
					end
				end
			end)
		end
	end
})

Breathings:AddToggle({
	Name = "Thunder Aura",
	Flag = "Thunder",
	Callback = function(v)
		getgenv().Thunder = v
		if v then
			task.spawn(function()
				while getgenv().Thunder do 
					local target = (getgenv().selectedPlayerName and getgenv().selectedPlayerName ~= "") 
						and findPlayerByName(getgenv().selectedPlayerName) 
						or getclosestSkills(game:GetService("Workspace").Mobs)

					if target and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 then
						local targetCFrame = target.GetModelCFrame and target:GetModelCFrame()
						if targetCFrame then
							local distance = (targetCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
							if distance < 40 then
								local args = {
									[1] = "Heat_Lightning_Damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = targetCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))                
							end
						end
					end
					task.wait(7)
				end
			end)

			task.spawn(function()
				while getgenv().Thunder do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local args = {
							[1] = "skil_ting_asd",
							[2] = game.Players.LocalPlayer,
							[3] = "HeatLightning",
							[4] = 5
						}
						game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))        
						task.wait(15)
					end
				end
			end)
		end
	end
})


Breathings:AddToggle({
	Name = "Sound Aura",
	Flag = "Sound",
	Callback = function(v)
		getgenv().Sound = v
		if v then
			task.spawn(function()
				while getgenv().Sound do 
					local target = (getgenv().selectedPlayerName and getgenv().selectedPlayerName ~= "") 
						and findPlayerByName(getgenv().selectedPlayerName) 
						or getclosestSkills(game:GetService("Workspace").Mobs)

					if target and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 then
						local targetCFrame = target.GetModelCFrame and target:GetModelCFrame()
						if targetCFrame then
							local distance = (targetCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
							if distance < 40 then
								local args = {
									[1] = "sound_breathing_bursting_boom_damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = targetCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))                
							end
						end
					end
					task.wait(8)
				end
			end)

			task.spawn(function()
				while getgenv().Sound do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local args = {
							[1] = "skil_ting_asd",
							[2] = game.Players.LocalPlayer,
							[3] = "sound_breathing_bursting_boom",
							[4] = 5
						}
						game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))        
						task.wait(19)
					end
				end
			end)
		end
	end
})

Breathings:AddToggle({
	Name = "Mist Aura",
	Flag = "Mist",
	Callback = function(v)
		getgenv().Mist = v
		if v then
			task.spawn(function()
				while getgenv().Mist do 
					local target = (getgenv().selectedPlayerName and getgenv().selectedPlayerName ~= "") 
						and findPlayerByName(getgenv().selectedPlayerName) 
						or getclosestSkills(game:GetService("Workspace").Mobs)

					if target and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 then
						local targetCFrame = target.GetModelCFrame and target:GetModelCFrame()
						if targetCFrame then
							local distance = (targetCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
							if distance < 40 then
								local args = {
									[1] = "mist_cloud_haze_damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = targetCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))                
							end
						end
					end
					task.wait(7)
				end
			end)

			task.spawn(function()
				while getgenv().Mist do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local args = {
							[1] = "skil_ting_asd",
							[2] = game.Players.LocalPlayer,
							[3] = "mist_breathing_cloud_and_haze",
							[4] = 5
						}
						game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))        
						task.wait(15)
					end
				end
			end)
		end
	end
})


	Breathings:AddToggle({
		Name = "Snow Aura",
		Flag = "Snow",
		Callback = function(v)
			getgenv().Snow = v
			if v then
				-- Tấn công nếu gần boss
				task.spawn(function()
					while getgenv().Snow do 
						local bossEntity = getclosest(AllowedBosses, game:GetService("Workspace").Mobs)
						
						if bossEntity and bossEntity:FindFirstChild("Humanoid") and bossEntity.Humanoid.Health > 0 then
							local bossCFrame = bossEntity:GetModelCFrame()
							local distance = (bossCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude

							if distance < 25 then
								local args = {
									[1] = "snow_breathing_frost_path_damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = bossCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))     
							end           
						end
						task.wait(0.3)
					end
				end)

				-- Kích hoạt skill định kỳ
				task.spawn(function()
					while getgenv().Snow do
						if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
							local args = {
								[1] = "skil_ting_asd",
								[2] = game.Players.LocalPlayer,
								[3] = "snow_breathing_frost_path",
								[4] = 5
							}
							game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))        
							task.wait(18)
						end
					end
				end)
			end
		end
	})

Breathings:AddToggle({
	Name = "Flame Aura",
	Flag = "Flame",
	Callback = function(v)
		getgenv().Flame = v
		if v then
			task.spawn(function()
				while getgenv().Flame do 
					local target = (getgenv().selectedPlayerName and getgenv().selectedPlayerName ~= "") 
						and findPlayerByName(getgenv().selectedPlayerName) 
						or getclosestSkills(game:GetService("Workspace").Mobs)
					
					if target and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 then
						local targetCFrame = target.GetModelCFrame and target:GetModelCFrame()
						if targetCFrame then
							local distance = (targetCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
							if distance < 40 then
								local args = {
									[1] = "flmae_rising_scorch_damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = targetCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))                
							end
						end
					end
					task.wait(5)
				end
			end)

			task.spawn(function()
				while getgenv().Flame do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local args = {
							[1] = "skil_ting_asd",
							[2] = game.Players.LocalPlayer,
							[3] = "flame_breathing_rising_scorching_sun",
							[4] = 5
						}
						game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))        
						task.wait(13)
					end
				end
			end)
		end
	end
})

Breathings:AddToggle({
	Name = "Beast Aura",
	Flag = "Beast",
	Callback = function(v)
		getgenv().Beast = v
		if v then
			task.spawn(function()
				while getgenv().Beast do 
					local target = (getgenv().selectedPlayerName and getgenv().selectedPlayerName ~= "") 
						and findPlayerByName(getgenv().selectedPlayerName) 
						or getclosestSkills(game:GetService("Workspace").Mobs)
					
					if target and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 then
						local targetCFrame = target.GetModelCFrame and target:GetModelCFrame()
						if targetCFrame then
							local distance = (targetCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
							if distance < 40 then
								local args = {
									[1] = "beast_breathing_pierce_damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = targetCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))                
							end
						end
					end
					task.wait(5)
				end
			end)

			task.spawn(function()
				while getgenv().Beast do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local args = {
							[1] = "skil_ting_asd",
							[2] = game.Players.LocalPlayer,
							[3] = "beast_breathing_pierce",
							[4] = 5
						}
						game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))        
						task.wait(13)
					end
				end
			end)
		end
	end
})

Breathings:AddToggle({
	Name = "Water Aura",
	Flag = "Water",
	Callback = function(v)
		getgenv().Water = v
		if v then
			task.spawn(function()
				while getgenv().Water do 
					local target = (getgenv().selectedPlayerName and getgenv().selectedPlayerName ~= "") 
						and findPlayerByName(getgenv().selectedPlayerName) 
						or getclosestSkills(game:GetService("Workspace").Mobs)
					
					if target and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 then
						local targetCFrame = target.GetModelCFrame and target:GetModelCFrame()
						if targetCFrame then
							local distance = (targetCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
							if distance < 40 then
								local args = {
									[1] = "water_surface_slash_damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = targetCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))                
							end
						end
					end
					task.wait(5)
				end
			end)

			task.spawn(function()
				while getgenv().Water do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local args = {
							[1] = "skil_ting_asd",
							[2] = game.Players.LocalPlayer,
							[3] = "Water_Surface_Slash",
							[4] = 5
						}
						game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))        
						task.wait(13)
					end
				end
			end)
		end
	end
})

Breathings:AddToggle({
	Name = "Insect Aura",
	Flag = "Insect",
	Callback = function(v)
		getgenv().Insect = v
		if v then
			task.spawn(function()
				while getgenv().Insect do 
					local target = (getgenv().selectedPlayerName and getgenv().selectedPlayerName ~= "") 
						and findPlayerByName(getgenv().selectedPlayerName) 
						or getclosestSkills(game:GetService("Workspace").Mobs)
					
					if target and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 then
						local targetCFrame = target.GetModelCFrame and target:GetModelCFrame()
						if targetCFrame then
							local distance = (targetCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
							if distance < 40 then
								local args = {
									[1] = "jaw_breaker_damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = targetCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))                
							end
						end
					end
					task.wait(5)
				end
			end)

			task.spawn(function()
				while getgenv().Insect do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local args = {
							[1] = "skil_ting_asd",
							[2] = game.Players.LocalPlayer,
							[3] = "Insect_breathing_jaw_breaker",
							[4] = 5
						}
						game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))        
						task.wait(16)
					end
				end
			end)
		end
	end
})

Breathings:AddToggle({
	Name = "Wind Aura",
	Flag = "Wind",
	Callback = function(v)
		getgenv().Wind = v
		if v then
			task.spawn(function()
				while getgenv().Wind do 
					local target = (getgenv().selectedPlayerName and getgenv().selectedPlayerName ~= "") 
						and findPlayerByName(getgenv().selectedPlayerName) 
						or getclosestSkills(game:GetService("Workspace").Mobs)
					
					if target and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 then
						local targetCFrame = target.GetModelCFrame and target:GetModelCFrame()
						if targetCFrame then
							local distance = (targetCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
							if distance < 40 then
								local args = {
									[1] = "Purifying_wind_damage",
									[2] = game.Players.LocalPlayer.Character,
									[3] = targetCFrame
								}          
								game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))                
							end
						end
					end
					task.wait(5)
				end
			end)

			task.spawn(function()
				while getgenv().Wind do
					if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						local args = {
							[1] = "skil_ting_asd",
							[2] = game.Players.LocalPlayer,
							[3] = "wind_breathing_purifying_wind",
							[4] = 5
						}
						game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))        
						task.wait(13)
					end
				end
			end)
		end
	end
})







	--// Update Labels / Dropdowns \\--
	spawn(function()
		while task.wait(4) do
			updateLabels()
		end
	end)

	local VirtualUser = game:GetService("VirtualUser")
	local Players = game:GetService("Players")

	-- Hàm tạo thời gian random kiểu tự nhiên, có lúc nhanh lúc chậm
	local function naturalWaitTime()
		local baseTime = 600 -- 10 phút
		local offset = math.random(-120, 180) -- lệch ngẫu nhiên từ -2 phút đến +3 phút
		return math.max(300, baseTime + offset) -- đảm bảo tối thiểu 5 phút
	end

	spawn(function()
		while true do
			wait(naturalWaitTime()) 
			if Players.LocalPlayer and Players.LocalPlayer.Character then
				VirtualUser:CaptureController()
				VirtualUser:ClickButton2(Vector2.new(math.random(100, 1820), math.random(100, 980))) 
			end
		end
	end)

	--[[MiscSection:AddToggle({
		Name = "Fake Name/DisplayName",
		Default = false,
		Callback = function(state)
			if state then

				getgenv().Config = {
						FakeDisplayName = "SKTxT1xLoc",
						FakeName = "hikarunokaze",
					FakeId = 1, -- ID giả để thay UserId
				}

				local players = game:GetService('Players')
				local lp = players.LocalPlayer

				local oldUserId = tostring(lp.UserId)
				local oldName = lp.Name
				local oldDisplayName = lp.DisplayName

				local function processtext(text)
					if string.gsub(text, oldName, Config.FakeName) ~= text then
						return string.gsub(text, oldName, Config.FakeName)
					end	
					if string.gsub(text, oldUserId, Config.FakeId) ~= text then
						return string.gsub(text, oldUserId, Config.FakeId)
					end
					if string.gsub(text, oldDisplayName, Config.FakeDisplayName) ~= text then
						return string.gsub(text, oldDisplayName, Config.FakeDisplayName)
					end
					return text or ''
				end

				for _, v in next, game:GetDescendants() do
					if v:IsA("TextBox") or v:IsA("TextLabel") or v:IsA("TextButton") then
						v.Text = processtext(v.Text)
						v.Name = processtext(v.Name)
						v.Changed:Connect(function(property)
							if property == "Text" or property == "Name" then
								v.Text = processtext(v.Text)
								v.Name = processtext(v.Name)
							end
						end)
					end
				end

				game.DescendantAdded:Connect(function(descendant)
					if descendant:IsA("TextBox") or descendant:IsA("TextLabel") or descendant:IsA("TextButton") then
						descendant.Text = processtext(descendant.Text)
						descendant.Name = processtext(descendant.Name)
						descendant.Changed:Connect(function(property)
							if property == "Text" or property == "Name" then
								descendant.Text = processtext(descendant.Text)
								descendant.Name = processtext(descendant.Name)
							end
						end)
					end
				end)

				lp.DisplayName = Config.FakeDisplayName
			end
		end
	})

	MiscSection:AddToggle({
		Name = "Fake Other Name/DisplayName",
		Default = false,
		Callback = function(state)
			if state then
				-- Cấu hình tên giả
				getgenv().Config = {
					TargetUsername = "2k9thiSinh10diem", -- ✅ Thay tên thật tại đây
					FakeDisplayName = "SKTxT1xLoc",
					FakeName = "hikarunokaze",
					FakeId = 1, -- ID giả để thay UserId
				}

				local players = game:GetService('Players')

				-- 🔍 Tìm người chơi theo tên
				local targetPlayer = nil
				for _, player in pairs(players:GetPlayers()) do
					if player.Name == Config.TargetUsername then
						targetPlayer = player
						break
					end
				end

				if not targetPlayer then
					warn("Không tìm thấy người chơi với username:", Config.TargetUsername)
					return
				end

				local lp = targetPlayer


				local oldUserId = tostring(lp.UserId)
				local oldName = lp.Name
				local oldDisplayName = lp.DisplayName

				local function processtext(text)
					if string.gsub(text, oldName, Config.FakeName) ~= text then
						return string.gsub(text, oldName, Config.FakeName)
					end	
					if string.gsub(text, oldUserId, Config.FakeId) ~= text then
						return string.gsub(text, oldUserId, Config.FakeId)
					end
					if string.gsub(text, oldDisplayName, Config.FakeDisplayName) ~= text then
						return string.gsub(text, oldDisplayName, Config.FakeDisplayName)
					end
					return text or ''
				end


				for _, v in next, game:GetDescendants() do
					if v:IsA("TextBox") or v:IsA("TextLabel") or v:IsA("TextButton") then
						v.Text = processtext(v.Text)
						v.Name = processtext(v.Name)
						v.Changed:Connect(function(property)
							if property == "Text" or property == "Name" then
								v.Text = processtext(v.Text)
								v.Name = processtext(v.Name)
							end
						end)
					end
				end


				game.DescendantAdded:Connect(function(descendant)
					if descendant:IsA("TextBox") or descendant:IsA("TextLabel") or descendant:IsA("TextButton") then
						descendant.Text = processtext(descendant.Text)
						descendant.Name = processtext(descendant.Name)
						descendant.Changed:Connect(function(property)
							if property == "Text" or property == "Name" then
								descendant.Text = processtext(descendant.Text)
								descendant.Name = processtext(descendant.Name)
							end
						end)
					end
				end)

				lp.DisplayName = Config.FakeDisplayName
			end
		end
	})]]


if game.PlaceId == 13883279773 or game.PlaceId == 17387475546 then
getgenv().AutoCollect = false
getgenv().TP_SPEED = 200    
getgenv().TP_DELAY = 0.25   


local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local Player = Players.LocalPlayer
local Flowers = Workspace:WaitForChild("Demon_Flowers_Spawn")

local FailedFlowers = {}
local CollectingThread = nil


local function getNearestFlower()
	local hrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
	if not hrp then return nil end
	local nearest, dist = nil, math.huge
	for _, flower in pairs(Flowers:GetChildren()) do
		if flower:IsA("Model") and flower.Parent and (not FailedFlowers[flower] or tick() - FailedFlowers[flower] > 20) then
			local pos = flower:GetPivot().Position
			local d = (hrp.Position - pos).Magnitude
			if d < dist then
				dist = d
				nearest = flower
			end
		end
	end
	return nearest
end


local function smoothMoveTo(position, speed)
	local hrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
	if not hrp or not position then return end
	local startPos = hrp.Position
	local delta = position - startPos
	local duration = delta.Magnitude / speed
	local startTime = tick()
	while tick() - startTime < duration and getgenv().AutoCollect do
		local t = math.min((tick() - startTime) / duration, 1)
		local nextPos = startPos + delta * t
		hrp.Velocity = Vector3.zero
		hrp.CFrame = CFrame.new(nextPos)
		RunService.Heartbeat:Wait()
	end
	hrp.Velocity = Vector3.zero
	hrp.CFrame = CFrame.new(position)
end


local function interactWithPrompt(flower)
	for _, obj in ipairs(flower:GetDescendants()) do
		if obj:IsA("ProximityPrompt") then
			local prompt = obj
			prompt.HoldDuration = 0
			prompt.MaxActivationDistance = 10
			prompt:InputHoldBegin()
			task.wait(0.5)
			prompt:InputHoldEnd()
			task.wait(0.3)
			return not flower:IsDescendantOf(Workspace)
		end
	end
	return false
end


local function startCollecting()
	if CollectingThread then return end
	CollectingThread = task.spawn(function()
		while getgenv().AutoCollect do
			pcall(function()
				local flower = getNearestFlower()
				if flower then
					smoothMoveTo(flower:GetPivot().Position, TP_SPEED)
					task.wait(TP_DELAY)
					local success = interactWithPrompt(flower)
					if not success then
						FailedFlowers[flower] = tick()
					end
				else
					task.wait(0.5)
				end
			end)
			task.wait(0.2)
		end
		CollectingThread = nil
	end)
end


local function stopCollecting()
	getgenv().AutoCollect = false
	if CollectingThread then
		task.cancel(CollectingThread)
		CollectingThread = nil
	end
end


MiscSection:AddToggle({
	Name = "Auto Collect Lilys",
	Flag = "AutoLilyToggle",
	Keybind = false,
	Callback = function(enabled)
		getgenv().AutoCollect = enabled
		if enabled then
			startCollecting()
		else
			stopCollecting()
		end
	end
})

	end

if game.PlaceId == 13883279773 or game.PlaceId == 17387475546 then

	local function teleportToMuzan()
		task.spawn(function()
			local players = game:GetService("Players")
			local localPlayer = players.LocalPlayer
			local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
			local hrp = character:WaitForChild("HumanoidRootPart")

			local function getMuzanSpawnPos()
				local muzan = workspace:FindFirstChild("Muzan")
				if muzan and muzan:FindFirstChild("SpawnPos") then
					return muzan.SpawnPos.Value
				end
				return nil
			end

			local muzanPos = getMuzanSpawnPos()
			if muzanPos then
				local offset = Vector3.new(10, 5, 0)
				local targetPos = muzanPos + offset

				hrp.CFrame = CFrame.new(targetPos)
			end
		end)
	end

	MiscSection:AddToggle({
		Name = "Auto Teleport to Muzan",
		Flag = "AutoTPMuzan",
		Callback = function(state)
			if state then
				teleportToMuzan()
			end
		end
	})
end
